{
  "chunks": [
    "---\ntitle: Architecture\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "The Model Context Protocol (MCP) follows a client-host-server architecture where each\nhost can run multiple client instances. This architecture enables users to integrate AI\ncapabilities across applications while maintaining clear security boundaries and\nisolating concerns. Built on JSON-RPC, MCP provides a stateful session protocol focused\non context exchange and sampling coordination between clients and servers.",
    "## Core Components",
    "```mermaid\ngraph LR\n    subgraph \"Application Host Process\"\n        H[Host]\n        C1[Client 1]\n        C2[Client 2]\n        C3[Client 3]\n        H --\u003e C1\n        H --\u003e C2\n        H --\u003e C3\n    end",
    "subgraph \"Local machine\"\n        S1[Server 1\u003cbr\u003eFiles \u0026 Git]\n        S2[Server 2\u003cbr\u003eDatabase]\n        R1[(\"Local\u003cbr\u003eResource A\")]\n        R2[(\"Local\u003cbr\u003eResource B\")]",
    "C1 --\u003e S1\n        C2 --\u003e S2\n        S1 \u003c--\u003e R1\n        S2 \u003c--\u003e R2\n    end",
    "subgraph \"Internet\"\n        S3[Server 3\u003cbr\u003eExternal APIs]\n        R3[(\"Remote\u003cbr\u003eResource C\")]",
    "C3 --\u003e S3\n        S3 \u003c--\u003e R3\n    end\n```",
    "### Host",
    "The host process acts as the container and coordinator:",
    "- Creates and manages multiple client instances\n- Controls client connection permissions and lifecycle\n- Enforces security policies and consent requirements\n- Handles user authorization decisions\n- Coordinates AI/LLM integration and sampling\n- Manages context aggregation across clients",
    "### Clients",
    "Each client is created by the host and maintains an isolated server connection:",
    "- Establishes one stateful session per server\n- Handles protocol negotiation and capability exchange\n- Routes protocol messages bidirectionally\n- Manages subscriptions and notifications\n- Maintains security boundaries between servers",
    "A host application creates and manages multiple clients, with each client having a 1:1\nrelationship with a particular server.",
    "### Servers",
    "Servers provide specialized context and capabilities:",
    "- Expose resources, tools and prompts via MCP primitives\n- Operate independently with focused responsibilities\n- Request sampling through client interfaces\n- Must respect security constraints\n- Can be local processes or remote services",
    "## Design Principles",
    "MCP is built on several key design principles that inform its architecture and\nimplementation:",
    "1. **Servers should be extremely easy to build**",
    "- Host applications handle complex orchestration responsibilities\n   - Servers focus on specific, well-defined capabilities\n   - Simple interfaces minimize implementation overhead\n   - Clear separation enables maintainable code",
    "2. **Servers should be highly composable**",
    "- Each server provides focused functionality in isolation\n   - Multiple servers can be combined seamlessly\n   - Shared protocol enables interoperability\n   - Modular design supports extensibility",
    "3. **Servers should not be able to read the whole conversation, nor \"see into\" other\n   servers**",
    "- Servers receive only necessary contextual information\n   - Full conversation history stays with the host\n   - Each server connection maintains isolation\n   - Cross-server interactions are controlled by the host\n   - Host process enforces security boundaries",
    "4. **Features can be added to servers and clients progressively**\n   - Core protocol provides minimal required functionality\n   - Additional capabilities can be negotiated as needed\n   - Servers and clients evolve independently\n   - Protocol designed for future extensibility\n   - Backwards compatibility is maintained",
    "## Capability Negotiation",
    "The Model Context Protocol uses a capability-based negotiation system where clients and\nservers explicitly declare their supported features during initialization. Capabilities\ndetermine which protocol features and primitives are available during a session.",
    "- Servers declare capabilities like resource subscriptions, tool support, and prompt\n  templates\n- Clients declare capabilities like sampling support and notification handling\n- Both parties must respect declared capabilities throughout the session\n- Additional capabilities can be negotiated through extensions to the protocol",
    "```mermaid\nsequenceDiagram\n    participant Host\n    participant Client\n    participant Server",
    "Host-\u003e\u003e+Client: Initialize client\n    Client-\u003e\u003e+Server: Initialize session with capabilities\n    Server--\u003e\u003eClient: Respond with supported capabilities",
    "Note over Host,Server: Active Session with Negotiated Features",
    "loop Client Requests\n        Host-\u003e\u003eClient: User- or model-initiated action\n        Client-\u003e\u003eServer: Request (tools/resources)\n        Server--\u003e\u003eClient: Response\n        Client--\u003e\u003eHost: Update UI or respond to model\n    end",
    "loop Server Requests\n        Server-\u003e\u003eClient: Request (sampling)\n        Client-\u003e\u003eHost: Forward to AI\n        Host--\u003e\u003eClient: AI response\n        Client--\u003e\u003eServer: Response\n    end",
    "loop Notifications\n        Server--)Client: Resource updates\n        Client--)Server: Status changes\n    end",
    "Host-\u003e\u003eClient: Terminate\n    Client-\u003e\u003e-Server: End session\n    deactivate Server\n```",
    "Each capability unlocks specific protocol features for use during the session. For\nexample:",
    "- Implemented [server features](/specification/draft/server) must be advertised in the\n  server's capabilities\n- Emitting resource subscription notifications requires the server to declare\n  subscription support\n- Tool invocation requires the server to declare tool capabilities\n- [Sampling](/specification/draft/client) requires the client to declare support in its\n  capabilities",
    "This capability negotiation ensures clients and servers have a clear understanding of\nsupported functionality while maintaining protocol extensibility.",
    "---\ntitle: Authorization\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "## Introduction",
    "### Purpose and Scope",
    "The Model Context Protocol provides authorization capabilities at the transport level,\nenabling MCP clients to make requests to restricted MCP servers on behalf of resource\nowners. This specification defines the authorization flow for HTTP-based transports.",
    "### Protocol Requirements",
    "Authorization is **OPTIONAL** for MCP implementations. When supported:",
    "- Implementations using an HTTP-based transport **SHOULD** conform to this specification.\n- Implementations using an STDIO transport **SHOULD NOT** follow this specification, and\n  instead retrieve credentials from the environment.\n- Implementations using alternative transports **MUST** follow established security best\n  practices for their protocol.",
    "### Standards Compliance",
    "This authorization mechanism is based on established specifications listed below, but\nimplements a selected subset of their features to ensure security and interoperability\nwhile maintaining simplicity:",
    "- OAuth 2.1 IETF DRAFT ([draft-ietf-oauth-v2-1-12](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12))\n- OAuth 2.0 Authorization Server Metadata\n  ([RFC8414](https://datatracker.ietf.org/doc/html/rfc8414))\n- OAuth 2.0 Dynamic Client Registration Protocol\n  ([RFC7591](https://datatracker.ietf.org/doc/html/rfc7591))\n- OAuth 2.0 Protected Resource Metadata ([RFC9728](https://datatracker.ietf.org/doc/html/rfc9728))",
    "## Authorization Flow",
    "### Roles",
    "A protected _MCP server_ acts as an [OAuth 2.1 resource server](https://www.ietf.org/archive/id/draft-ietf-oauth-v2-1-12.html#name-roles),\ncapable of accepting and responding to protected resource requests using access tokens.",
    "An _MCP client_ acts as an [OAuth 2.1 client](https://www.ietf.org/archive/id/draft-ietf-oauth-v2-1-12.html#name-roles),\nmaking protected resource requests on behalf of a resource owner.",
    "The _authorization server_ is responsible for interacting with the user (if necessary) and issuing access tokens for use at the MCP server.\nThe implementation details of the authorization server are beyond the scope of this specification. It may be hosted with the\nresource server or a separate entity. The [Authorization Server Discovery section](#authorization-server-discovery)\nspecifies how an MCP server indicates the location of its corresponding authorization server to a client.",
    "### Overview",
    "1. Authorization servers **MUST** implement OAuth 2.1 with appropriate security\n   measures for both confidential and public clients.",
    "1. Authorization servers and MCP clients **SHOULD** support the OAuth 2.0 Dynamic Client Registration\n   Protocol ([RFC7591](https://datatracker.ietf.org/doc/html/rfc7591)).",
    "1. MCP servers **MUST** implement OAuth 2.0 Protected Resource Metadata ([RFC9728](https://datatracker.ietf.org/doc/html/rfc9728)).\n   MCP clients **MUST** use OAuth 2.0 Protected Resource Metadata for authorization server discovery.",
    "1. MCP authorization servers **MUST** provide OAuth 2.0 Authorization\n   Server Metadata ([RFC8414](https://datatracker.ietf.org/doc/html/rfc8414)).\n   MCP clients **MUST** use the OAuth 2.0 Authorization Server Metadata.",
    "### Authorization Server Discovery",
    "This section describes the mechanisms by which MCP servers advertise their associated\nauthorization servers to MCP clients, as well as the discovery process through which MCP\nclients can determine authorization server endpoints and supported capabilities.",
    "#### Authorization Server Location",
    "MCP servers **MUST** implement the OAuth 2.0 Protected Resource Metadata ([RFC9728](https://datatracker.ietf.org/doc/html/rfc9728))\nspecification to indicate the locations of authorization servers. The Protected Resource Metadata document returned by the MCP server **MUST** include\nthe `authorization_servers` field containing at least one authorization server.",
    "The specific use of `authorization_servers` is beyond the scope of this specification; implementers should consult\nOAuth 2.0 Protected Resource Metadata ([RFC9728](https://datatracker.ietf.org/doc/html/rfc9728)) for\nguidance on implementation details.",
    "Implementors should note that Protected Resource Metadata documents can define multiple authorization servers. The responsibility for selecting which authorization server to use lies with the MCP client, following the guidelines specified in\n[RFC9728 Section 7.6 \"Authorization Servers\"](https://datatracker.ietf.org/doc/html/rfc9728#name-authorization-servers).",
    "MCP servers **MUST** use the HTTP header `WWW-Authenticate` when returning a _401 Unauthorized_ to indicate the location of the resource server metadata URL\nas described in [RFC9728 Section 5.1 \"WWW-Authenticate Response\"](https://datatracker.ietf.org/doc/html/rfc9728#name-www-authenticate-response).",
    "MCP clients **MUST** be able to parse `WWW-Authenticate` headers and respond appropriately to `HTTP 401 Unauthorized` responses from the MCP server.",
    "#### Server Metadata Discovery",
    "MCP clients **MUST** follow the OAuth 2.0 Authorization Server Metadata [RFC8414](https://datatracker.ietf.org/doc/html/rfc8414)\nspecification to obtain the information required to interact with the authorization server.",
    "#### Sequence Diagram",
    "The following diagram outlines an example flow:",
    "```mermaid\nsequenceDiagram\n    participant C as Client\n    participant M as MCP Server (Resource Server)\n    participant A as Authorization Server",
    "C-\u003e\u003eM: MCP request without token\n    M--\u003e\u003eC: HTTP 401 Unauthorized with WWW-Authenticate header\n    Note over C: Extract resource_metadata\u003cbr /\u003efrom WWW-Authenticate",
    "C-\u003e\u003eM: GET /.well-known/oauth-protected-resource\n    M--\u003e\u003eC: Resource metadata with authorization server URL\n    Note over C: Validate RS metadata,\u003cbr /\u003ebuild AS metadata URL",
    "C-\u003e\u003eA: GET /.well-known/oauth-authorization-server\n    A--\u003e\u003eC: Authorization server metadata",
    "Note over C,A: OAuth 2.1 authorization flow happens here",
    "C-\u003e\u003eA: Token request\n    A--\u003e\u003eC: Access token",
    "C-\u003e\u003eM: MCP request with access token\n    M--\u003e\u003eC: MCP response\n    Note over C,M: MCP communication continues with valid token\n```",
    "### Dynamic Client Registration",
    "MCP clients and authorization servers **SHOULD** support the\nOAuth 2.0 Dynamic Client Registration Protocol [RFC7591](https://datatracker.ietf.org/doc/html/rfc7591)\nto allow MCP clients to obtain OAuth client IDs without user interaction. This provides a\nstandardized way for clients to automatically register with new authorization servers, which is crucial\nfor MCP because:",
    "- Clients may not know all possible MCP servers and their authorization servers in advance.\n- Manual registration would create friction for users.\n- It enables seamless connection to new MCP servers and their authorization servers.\n- Authorization servers can implement their own registration policies.",
    "Any authorization servers that _do not_ support Dynamic Client Registration need to provide\nalternative ways to obtain a client ID (and, if applicable, client credentials). For one of\nthese authorization servers, MCP clients will have to either:",
    "1. Hardcode a client ID (and, if applicable, client credentials) specifically for the MCP client to use when\n   interacting with that authorization server, or\n2. Present a UI to users that allows them to enter these details, after registering an\n   OAuth client themselves (e.g., through a configuration interface hosted by the\n   server).",
    "### Authorization Flow Steps",
    "The complete Authorization flow proceeds as follows:",
    "```mermaid\nsequenceDiagram\n    participant B as User-Agent (Browser)\n    participant C as Client\n    participant M as MCP Server (Resource Server)\n    participant A as Authorization Server",
    "C-\u003e\u003eM: MCP request without token\n    M-\u003e\u003eC: HTTP 401 Unauthorized with WWW-Authenticate header\n    Note over C: Extract resource_metadata URL from WWW-Authenticate",
    "C-\u003e\u003eM: Request Protected Resource Metadata\n    M-\u003e\u003eC: Return metadata",
    "Note over C: Parse metadata and extract authorization server(s)\u003cbr/\u003eClient determines AS to use",
    "C-\u003e\u003eA: GET /.well-known/oauth-authorization-server\n    A-\u003e\u003eC: Authorization server metadata response",
    "alt Dynamic client registration\n        C-\u003e\u003eA: POST /register\n        A-\u003e\u003eC: Client Credentials\n    end",
    "Note over C: Generate PKCE parameters\u003cbr/\u003eInclude resource parameter\n    C-\u003e\u003eB: Open browser with authorization URL + code_challenge + resource\n    B-\u003e\u003eA: Authorization request with resource parameter\n    Note over A: User authorizes\n    A-\u003e\u003eB: Redirect to callback with authorization code\n    B-\u003e\u003eC: Authorization code callback\n    C-\u003e\u003eA: Token request + code_verifier + resource\n    A-\u003e\u003eC: Access token (+ refresh token)\n    C-\u003e\u003eM: MCP request with access token\n    M--\u003e\u003eC: MCP response\n    Note over C,M: MCP communication continues with valid token\n```",
    "#### Resource Parameter Implementation",
    "MCP clients **MUST** implement Resource Indicators for OAuth 2.0 as defined in [RFC 8707](https://www.rfc-editor.org/rfc/rfc8707.html)\nto explicitly specify the target resource for which the token is being requested. The `resource` parameter:",
    "1. **MUST** be included in both authorization requests and token requests.\n2. **MUST** identify the MCP server that the client intends to use the token with.\n3. **MUST** use the canonical URI of the MCP server as defined in [RFC 8707 Section 2](https://www.rfc-editor.org/rfc/rfc8707.html#name-access-token-request).",
    "##### Canonical Server URI",
    "For the purposes of this specification, the canonical URI of an MCP server is defined as the resource identifier as specified in\n[RFC 8707 Section 2](https://www.rfc-editor.org/rfc/rfc8707.html#section-2) and aligns with the `resource` parameter in\n[RFC 9728](https://datatracker.ietf.org/doc/html/rfc9728).",
    "MCP clients **SHOULD** provide the most specific URI that they can for the MCP server they intend to access, following the guidance in [RFC 8707](https://www.rfc-editor.org/rfc/rfc8707). While the canonical form uses lowercase scheme and host components, implementations **SHOULD** accept uppercase scheme and host components for robustness and interoperability.",
    "Examples of valid canonical URIs:",
    "- `https://mcp.example.com/mcp`\n- `https://mcp.example.com`\n- `https://mcp.example.com:8443`\n- `https://mcp.example.com/server/mcp` (when path component is necessary to identify individual MCP server)",
    "Examples of invalid canonical URIs:",
    "- `mcp.example.com` (missing scheme)\n- `https://mcp.example.com#fragment` (contains fragment)",
    "\u003e **Note:** While both `https://mcp.example.com/` (with trailing slash) and `https://mcp.example.com` (without trailing slash) are technically valid absolute URIs according to [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986), implementations **SHOULD** consistently use the form without the trailing slash for better interoperability unless the trailing slash is semantically significant for the specific resource.",
    "For example, if accessing an MCP server at `https://mcp.example.com`, the authorization request would include:",
    "```\n\u0026resource=https%3A%2F%2Fmcp.example.com\n```",
    "MCP clients **MUST** send this parameter regardless of whether authorization servers support it.",
    "### Access Token Usage",
    "#### Token Requirements",
    "Access token handling when making requests to MCP servers **MUST** conform to the requirements defined in\n[OAuth 2.1 Section 5 \"Resource Requests\"](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-5).\nSpecifically:",
    "1. MCP client **MUST** use the Authorization request header field defined in\n   [OAuth 2.1 Section 5.1.1](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-5.1.1):",
    "```\nAuthorization: Bearer \u003caccess-token\u003e\n```",
    "Note that authorization **MUST** be included in every HTTP request from client to server,\neven if they are part of the same logical session.",
    "2. Access tokens **MUST NOT** be included in the URI query string",
    "Example request:",
    "```http\nGET /mcp HTTP/1.1\nHost: mcp.example.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIs...\n```",
    "#### Token Handling",
    "MCP servers, acting in their role as an OAuth 2.1 resource server, **MUST** validate access tokens as described in\n[OAuth 2.1 Section 5.2](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-5.2).\nMCP servers **MUST** validate that access tokens were issued specifically for them as the intended audience,\naccording to [RFC 8707 Section 2](https://www.rfc-editor.org/rfc/rfc8707.html#section-2).\nIf validation fails, servers **MUST** respond according to\n[OAuth 2.1 Section 5.3](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-5.3)\nerror handling requirements. Invalid or expired tokens **MUST** receive a HTTP 401\nresponse.",
    "MCP clients **MUST NOT** send tokens to the MCP server other than ones issued by the MCP server's authorization server.",
    "Authorization servers **MUST** only accept tokens that are valid for use with their\nown resources.",
    "MCP servers **MUST NOT** accept or transit any other tokens.",
    "### Error Handling",
    "Servers **MUST** return appropriate HTTP status codes for authorization errors:",
    "| Status Code | Description  | Usage                                      |\n| ----------- | ------------ | ------------------------------------------ |\n| 401         | Unauthorized | Authorization required or token invalid    |\n| 403         | Forbidden    | Invalid scopes or insufficient permissions |\n| 400         | Bad Request  | Malformed authorization request            |",
    "## Security Considerations",
    "Implementations **MUST** follow OAuth 2.1 security best practices as laid out in [OAuth 2.1 Section 7. \"Security Considerations\"](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#name-security-considerations).",
    "### Token Audience Binding and Validation",
    "[RFC 8707](https://www.rfc-editor.org/rfc/rfc8707.html) Resource Indicators provide critical security benefits by binding tokens to their intended\naudiences **when the Authorization Server supports the capability**. To enable current and future adoption:",
    "- MCP clients **MUST** include the `resource` parameter in authorization and token requests as specified in the [Resource Parameter Implementation](#resource-parameter-implementation) section\n- MCP servers **MUST** validate that tokens presented to them were specifically issued for their use",
    "The [Security Best Practices document](/specification/draft/basic/security_best_practices#token-passthrough)\noutlines why token audience validation is crucial and why token passthrough is explicitly forbidden.",
    "### Token Theft",
    "Attackers who obtain tokens stored by the client, or tokens cached or logged on the server can access protected resources with\nrequests that appear legitimate to resource servers.",
    "Clients and servers **MUST** implement secure token storage and follow OAuth best practices,\nas outlined in [OAuth 2.1, Section 7.1](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-7.1).",
    "Authorization servers **SHOULD** issue short-lived access tokens to reduce the impact of leaked tokens.\nFor public clients, authorization servers **MUST** rotate refresh tokens as described in [OAuth 2.1 Section 4.3.1 \"Refresh Token Grant\"](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-4.3.1).",
    "### Communication Security",
    "Implementations **MUST** follow [OAuth 2.1 Section 1.5 \"Communication Security\"](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-1.5).",
    "Specifically:",
    "1. All authorization server endpoints **MUST** be served over HTTPS.\n1. All redirect URIs **MUST** be either `localhost` or use HTTPS.",
    "### Authorization Code Protection",
    "An attacker who has gained access to an authorization code contained in an authorization response can try to redeem the authorization code for an access token or otherwise make use of the authorization code.\n(Further described in [OAuth 2.1 Section 7.5](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-7.5))",
    "To mitigate this, MCP clients **MUST** implement PKCE according to [OAuth 2.1 Section 7.5.2](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-7.5.2).\nPKCE helps prevent authorization code interception and injection attacks by requiring clients to create a secret verifier-challenge pair, ensuring that only the original requestor can exchange an authorization code for tokens.",
    "### Open Redirection",
    "An attacker may craft malicious redirect URIs to direct users to phishing sites.",
    "MCP clients **MUST** have redirect URIs registered with the authorization server.",
    "Authorization servers **MUST** validate exact redirect URIs against pre-registered values to prevent redirection attacks.",
    "MCP clients **SHOULD** use and verify state parameters in the authorization code flow\nand discard any results that do not include or have a mismatch with the original state.",
    "Authorization servers **MUST** take precautions to prevent redirecting user agents to untrusted URI's, following suggestions laid out in [OAuth 2.1 Section 7.12.2](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-7.12.2)",
    "Authorization servers **SHOULD** only automatically redirect the user agent if it trusts the redirection URI. If the URI is not trusted, the authorization server MAY inform the user and rely on the user to make the correct decision.",
    "### Confused Deputy Problem",
    "Attackers can exploit MCP servers acting as intermediaries to third-party APIs, leading to [confused deputy vulnerabilities](/specification/draft/basic/security_best_practices#confused-deputy-problem).\nBy using stolen authorization codes, they can obtain access tokens without user consent.",
    "MCP proxy servers using static client IDs **MUST** obtain user consent for each dynamically\nregistered client before forwarding to third-party authorization servers (which may require additional consent).",
    "### Access Token Privilege Restriction",
    "An attacker can gain unauthorized access or otherwise compromise a MCP server if the server accepts tokens issued for other resources.",
    "This vulnerability has two critical dimensions:",
    "1. **Audience validation failures.** When an MCP server doesn't verify that tokens were specifically intended for it (for example, via the audience claim, as mentioned in [RFC9068](https://www.rfc-editor.org/rfc/rfc9068.html)), it may accept tokens originally issued for other services. This breaks a fundamental OAuth security boundary, allowing attackers to reuse legitimate tokens across different services than intended.\n2. **Token passthrough.** If the MCP server not only accepts tokens with incorrect audiences but also forwards these unmodified tokens to downstream services, it can potentially cause the [\"confused deputy\" problem](#confused-deputy-problem), where the downstream API may incorrectly trust the token as if it came from the MCP server or assume the token was validated by the upstream API. See the [Token Passthrough section](/specification/2025-06-18/basic/security_best_practices#token-passthrough) of the Security Best Practices guide for additional details.",
    "MCP servers **MUST** validate access tokens before processing the request, ensuring the access token is issued specifically for the MCP server, and take all necessary steps to ensure no data is returned to unauthorized parties.",
    "A MCP server **MUST** follow the guidelines in [OAuth 2.1 - Section 5.2](https://www.ietf.org/archive/id/draft-ietf-oauth-v2-1-12.html#section-5.2) to validate inbound tokens.",
    "MCP servers **MUST** only accept tokens specifically intended for themselves and **MUST** reject tokens that do not include them in the audience claim or otherwise verify that they are the intended recipient of the token. See the [Security Best Practices Token Passthrough section](/specification/draft/basic/security_best_practices#token-passthrough) for details.",
    "If the MCP server makes requests to upstream APIs, it may act as an OAuth client to them. The access token used at the upstream API is a seperate token, issued by the upstream authorization server. The MCP server **MUST NOT** pass through the token it received from the MCP client.",
    "MCP clients **MUST** implement and use the `resource` parameter as defined in [RFC 8707 - Resource Indicators for OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8707.html)\nto explicitly specify the target resource for which the token is being requested. This requirement aligns with the recommendation in\n[RFC 9728 Section 7.4](https://datatracker.ietf.org/doc/html/rfc9728#section-7.4). This ensures that access tokens are bound to their intended resources and\ncannot be misused across different services.",
    "---\ntitle: Overview\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol consists of several key components that work together:",
    "- **Base Protocol**: Core JSON-RPC message types\n- **Lifecycle Management**: Connection initialization, capability negotiation, and\n  session control\n- **Authorization**: Authentication and authorization framework for HTTP-based transports\n- **Server Features**: Resources, prompts, and tools exposed by servers\n- **Client Features**: Sampling and root directory lists provided by clients\n- **Utilities**: Cross-cutting concerns like logging and argument completion",
    "All implementations **MUST** support the base protocol and lifecycle management\ncomponents. Other components **MAY** be implemented based on the specific needs of the\napplication.",
    "These protocol layers establish clear separation of concerns while enabling rich\ninteractions between clients and servers. The modular design allows implementations to\nsupport exactly the features they need.",
    "## Messages",
    "All messages between MCP clients and servers **MUST** follow the\n[JSON-RPC 2.0](https://www.jsonrpc.org/specification) specification. The protocol defines\nthese types of messages:",
    "### Requests",
    "Requests are sent from the client to the server or vice versa, to initiate an operation.",
    "```typescript\n{\n  jsonrpc: \"2.0\";\n  id: string | number;\n  method: string;\n  params?: {\n    [key: string]: unknown;\n  };\n}\n```",
    "- Requests **MUST** include a string or integer ID.\n- Unlike base JSON-RPC, the ID **MUST NOT** be `null`.\n- The request ID **MUST NOT** have been previously used by the requestor within the same\n  session.",
    "### Responses",
    "Responses are sent in reply to requests, containing the result or error of the operation.",
    "```typescript\n{\n  jsonrpc: \"2.0\";\n  id: string | number;\n  result?: {\n    [key: string]: unknown;\n  }\n  error?: {\n    code: number;\n    message: string;\n    data?: unknown;\n  }\n}\n```",
    "- Responses **MUST** include the same ID as the request they correspond to.\n- **Responses** are further sub-categorized as either **successful results** or\n  **errors**. Either a `result` or an `error` **MUST** be set. A response **MUST NOT**\n  set both.\n- Results **MAY** follow any JSON object structure, while errors **MUST** include an\n  error code and message at minimum.\n- Error codes **MUST** be integers.",
    "### Notifications",
    "Notifications are sent from the client to the server or vice versa, as a one-way message.\nThe receiver **MUST NOT** send a response.",
    "```typescript\n{\n  jsonrpc: \"2.0\";\n  method: string;\n  params?: {\n    [key: string]: unknown;\n  };\n}\n```",
    "- Notifications **MUST NOT** include an ID.",
    "## Auth",
    "MCP provides an [Authorization](/specification/draft/basic/authorization) framework for use with HTTP.\nImplementations using an HTTP-based transport **SHOULD** conform to this specification,\nwhereas implementations using STDIO transport **SHOULD NOT** follow this specification,\nand instead retrieve credentials from the environment.",
    "Additionally, clients and servers **MAY** negotiate their own custom authentication and\nauthorization strategies.",
    "For further discussions and contributions to the evolution of MCP’s auth mechanisms, join\nus in\n[GitHub Discussions](https://github.com/modelcontextprotocol/specification/discussions)\nto help shape the future of the protocol!",
    "## Schema",
    "The full specification of the protocol is defined as a\n[TypeScript schema](https://github.com/modelcontextprotocol/specification/blob/main/schema/draft/schema.ts).\nThis is the source of truth for all protocol messages and structures.",
    "There is also a\n[JSON Schema](https://github.com/modelcontextprotocol/specification/blob/main/schema/draft/schema.json),\nwhich is automatically generated from the TypeScript source of truth, for use with\nvarious automated tooling.",
    "### General fields",
    "#### `_meta`",
    "The `_meta` property/parameter is reserved by MCP to allow clients and servers\nto attach additional metadata to their interactions.",
    "Certain key names are reserved by MCP for protocol-level metadata, as specified below;\nimplementations MUST NOT make assumptions about values at these keys.",
    "Additionally, definitions in the [schema](https://github.com/modelcontextprotocol/specification/blob/main/schema/draft/schema.ts)\nmay reserve particular names for purpose-specific metadata, as declared in those definitions.",
    "**Key name format:** valid `_meta` key names have two segments: an optional **prefix**, and a **name**.",
    "**Prefix:**",
    "- If specified, MUST be a series of labels separated by dots (`.`), followed by a slash (`/`).\n  - Labels MUST start with a letter and end with a letter or digit; interior characters can be letters, digits, or hyphens (`-`).\n- Any prefix beginning with zero or more valid labels, followed by `modelcontextprotocol` or `mcp`, followed by any valid label,\n  is **reserved** for MCP use.\n  - For example: `modelcontextprotocol.io/`, `mcp.dev/`, `api.modelcontextprotocol.org/`, and `tools.mcp.com/` are all reserved.",
    "**Name:**",
    "- Unless empty, MUST begin and end with an alphanumeric character (`[a-z0-9A-Z]`).\n- MAY contain hyphens (`-`), underscores (`_`), dots (`.`), and alphanumerics in between.",
    "---\ntitle: Lifecycle\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol (MCP) defines a rigorous lifecycle for client-server\nconnections that ensures proper capability negotiation and state management.",
    "1. **Initialization**: Capability negotiation and protocol version agreement\n2. **Operation**: Normal protocol communication\n3. **Shutdown**: Graceful termination of the connection",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Note over Client,Server: Initialization Phase\n    activate Client\n    Client-\u003e\u003e+Server: initialize request\n    Server--\u003e\u003eClient: initialize response\n    Client--)Server: initialized notification",
    "Note over Client,Server: Operation Phase\n    rect rgb(200, 220, 250)\n        note over Client,Server: Normal protocol operations\n    end",
    "Note over Client,Server: Shutdown\n    Client--)-Server: Disconnect\n    deactivate Server\n    Note over Client,Server: Connection closed\n```",
    "## Lifecycle Phases",
    "### Initialization",
    "The initialization phase **MUST** be the first interaction between client and server.\nDuring this phase, the client and server:",
    "- Establish protocol version compatibility\n- Exchange and negotiate capabilities\n- Share implementation details",
    "The client **MUST** initiate this phase by sending an `initialize` request containing:",
    "- Protocol version supported\n- Client capabilities\n- Client implementation information",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"roots\": {\n        \"listChanged\": true\n      },\n      \"sampling\": {},\n      \"elicitation\": {}\n    },\n    \"clientInfo\": {\n      \"name\": \"ExampleClient\",\n      \"title\": \"Example Client Display Name\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}\n```",
    "The server **MUST** respond with its own capabilities and information:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"logging\": {},\n      \"prompts\": {\n        \"listChanged\": true\n      },\n      \"resources\": {\n        \"subscribe\": true,\n        \"listChanged\": true\n      },\n      \"tools\": {\n        \"listChanged\": true\n      }\n    },\n    \"serverInfo\": {\n      \"name\": \"ExampleServer\",\n      \"title\": \"Example Server Display Name\",\n      \"version\": \"1.0.0\"\n    },\n    \"instructions\": \"Optional instructions for the client\"\n  }\n}\n```",
    "After successful initialization, the client **MUST** send an `initialized` notification\nto indicate it is ready to begin normal operations:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/initialized\"\n}\n```",
    "- The client **SHOULD NOT** send requests other than\n  [pings](/specification/draft/basic/utilities/ping) before the server has responded to the\n  `initialize` request.\n- The server **SHOULD NOT** send requests other than\n  [pings](/specification/draft/basic/utilities/ping) and\n  [logging](/specification/draft/server/utilities/logging) before receiving the `initialized`\n  notification.",
    "#### Version Negotiation",
    "In the `initialize` request, the client **MUST** send a protocol version it supports.\nThis **SHOULD** be the _latest_ version supported by the client.",
    "If the server supports the requested protocol version, it **MUST** respond with the same\nversion. Otherwise, the server **MUST** respond with another protocol version it\nsupports. This **SHOULD** be the _latest_ version supported by the server.",
    "If the client does not support the version in the server's response, it **SHOULD**\ndisconnect.",
    "\u003cNote\u003e\nIf using HTTP, the client **MUST** include the `MCP-Protocol-Version:\n\u003cprotocol-version\u003e` HTTP header on all subsequent requests to the MCP\nserver.\nFor details, see [the Protocol Version Header section in Transports](/specification/draft/basic/transports#protocol-version-header).\n\u003c/Note\u003e",
    "#### Capability Negotiation",
    "Client and server capabilities establish which optional protocol features will be\navailable during the session.",
    "Key capabilities include:",
    "| Category | Capability     | Description                                                                          |\n| -------- | -------------- | ------------------------------------------------------------------------------------ |\n| Client   | `roots`        | Ability to provide filesystem [roots](/specification/draft/client/roots)             |\n| Client   | `sampling`     | Support for LLM [sampling](/specification/draft/client/sampling) requests            |\n| Client   | `elicitation`  | Support for server [elicitation](/specification/draft/client/elicitation) requests   |\n| Client   | `experimental` | Describes support for non-standard experimental features                             |\n| Server   | `prompts`      | Offers [prompt templates](/specification/draft/server/prompts)                       |\n| Server   | `resources`    | Provides readable [resources](/specification/draft/server/resources)                 |\n| Server   | `tools`        | Exposes callable [tools](/specification/draft/server/tools)                          |\n| Server   | `logging`      | Emits structured [log messages](/specification/draft/server/utilities/logging)       |\n| Server   | `completions`  | Supports argument [autocompletion](/specification/draft/server/utilities/completion) |\n| Server   | `experimental` | Describes support for non-standard experimental features                             |",
    "Capability objects can describe sub-capabilities like:",
    "- `listChanged`: Support for list change notifications (for prompts, resources, and\n  tools)\n- `subscribe`: Support for subscribing to individual items' changes (resources only)",
    "### Operation",
    "During the operation phase, the client and server exchange messages according to the\nnegotiated capabilities.",
    "Both parties **SHOULD**:",
    "- Respect the negotiated protocol version\n- Only use capabilities that were successfully negotiated",
    "### Shutdown",
    "During the shutdown phase, one side (usually the client) cleanly terminates the protocol\nconnection. No specific shutdown messages are defined—instead, the underlying transport\nmechanism should be used to signal connection termination:",
    "#### stdio",
    "For the stdio [transport](/specification/draft/basic/transports), the client **SHOULD** initiate\nshutdown by:",
    "1. First, closing the input stream to the child process (the server)\n2. Waiting for the server to exit, or sending `SIGTERM` if the server does not exit\n   within a reasonable time\n3. Sending `SIGKILL` if the server does not exit within a reasonable time after `SIGTERM`",
    "The server **MAY** initiate shutdown by closing its output stream to the client and\nexiting.",
    "#### HTTP",
    "For HTTP [transports](/specification/draft/basic/transports), shutdown is indicated by closing the\nassociated HTTP connection(s).",
    "## Timeouts",
    "Implementations **SHOULD** establish timeouts for all sent requests, to prevent hung\nconnections and resource exhaustion. When the request has not received a success or error\nresponse within the timeout period, the sender **SHOULD** issue a [cancellation\nnotification](/specification/draft/basic/utilities/cancellation) for that request and stop waiting for\na response.",
    "SDKs and other middleware **SHOULD** allow these timeouts to be configured on a\nper-request basis.",
    "Implementations **MAY** choose to reset the timeout clock when receiving a [progress\nnotification](/specification/draft/basic/utilities/progress) corresponding to the request, as this\nimplies that work is actually happening. However, implementations **SHOULD** always\nenforce a maximum timeout, regardless of progress notifications, to limit the impact of a\nmisbehaving client or server.",
    "## Error Handling",
    "Implementations **SHOULD** be prepared to handle these error cases:",
    "- Protocol version mismatch\n- Failure to negotiate required capabilities\n- Request [timeouts](#timeouts)",
    "Example initialization error:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"Unsupported protocol version\",\n    \"data\": {\n      \"supported\": [\"2024-11-05\"],\n      \"requested\": \"1.0.0\"\n    }\n  }\n}\n```",
    "---\ntitle: Security Best Practices\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "## Introduction",
    "### Purpose and Scope",
    "This document provides security considerations for the Model Context Protocol (MCP), complementing the MCP Authorization specification. This document identifies security risks, attack vectors, and best practices specific to MCP implementations.",
    "The primary audience for this document includes developers implementing MCP authorization flows, MCP server operators, and security professionals evaluating MCP-based systems. This document should be read alongside the MCP Authorization specification and [OAuth 2.0 security best practices](https://datatracker.ietf.org/doc/html/rfc9700).",
    "## Attacks and Mitigations",
    "This section gives a detailed description of attacks on MCP implementations, along with potential countermeasures.",
    "### Confused Deputy Problem",
    "Attackers can exploit MCP servers proxying other resource servers, creating \"[confused deputy](https://en.wikipedia.org/wiki/Confused_deputy_problem)\" vulnerabilities.",
    "#### Terminology",
    "**MCP Proxy Server**\n: An MCP server that connects MCP clients to third-party APIs, offering MCP features while delegating operations and acting as a single OAuth client to the third-party API server.",
    "**Third-Party Authorization Server**\n: Authorization server that protects the third-party API. It may lack dynamic client registration support, requiring MCP proxy to use a static client ID for all requests.",
    "**Third-Party API**\n: The protected resource server that provides the actual API functionality. Access to this\nAPI requires tokens issued by the third-party authorization server.",
    "**Static Client ID**\n: A fixed OAuth 2.0 client identifier used by the MCP proxy server when communicating with\nthe third-party authorization server. This Client ID refers to the MCP server acting as a client\nto the Third-Party API. It is the same value for all MCP server to Third-Party API interactions regardless of\nwhich MCP client initiated the request.",
    "#### Architecture and Attack Flows",
    "##### Normal OAuth proxy usage (preserves user consent)",
    "```mermaid\nsequenceDiagram\n    participant UA as User-Agent (Browser)\n    participant MC as MCP Client\n    participant M as MCP Proxy Server\n    participant TAS as Third-Party Authorization Server",
    "Note over UA,M: Initial Auth flow completed",
    "Note over UA,TAS: Step 1: Legitimate user consent for Third Party Server",
    "M-\u003e\u003eUA: Redirect to third party authorization server\n    UA-\u003e\u003eTAS: Authorization request (client_id: mcp-proxy)\n    TAS-\u003e\u003eUA: Authorization consent screen\n    Note over UA: Review consent screen\n    UA-\u003e\u003eTAS: Approve\n    TAS-\u003e\u003eUA: Set consent cookie for client ID: mcp-proxy\n    TAS-\u003e\u003eUA: 3P Authorization code + redirect to mcp-proxy-server.com\n    UA-\u003e\u003eM: 3P Authorization code\n    Note over M,TAS: Exchange 3P code for 3P token\n    Note over M: Generate MCP authorization code\n    M-\u003e\u003eUA: Redirect to MCP Client with MCP authorization code",
    "Note over M,UA: Exchange code for token, etc.\n```",
    "##### Malicious OAuth proxy usage (skips user consent)",
    "```mermaid\nsequenceDiagram\n    participant UA as User-Agent (Browser)\n    participant M as MCP Proxy Server\n    participant TAS as Third-Party Authorization Server\n    participant A as Attacker",
    "Note over UA,A: Step 2: Attack (leveraging existing cookie, skipping consent)\n    A-\u003e\u003eM: Dynamically register malicious client, redirect_uri: attacker.com\n    A-\u003e\u003eUA: Sends malicious link\n    UA-\u003e\u003eTAS: Authorization request (client_id: mcp-proxy) + consent cookie\n    rect rgba(255, 17, 0, 0.67)\n    TAS-\u003e\u003eTAS: Cookie present, consent skipped\n    end",
    "TAS-\u003e\u003eUA: 3P Authorization code + redirect to mcp-proxy-server.com\n   UA-\u003e\u003eM: 3P Authorization code\n   Note over M,TAS: Exchange 3P code for 3P token\n   Note over M: Generate MCP authorization code\n   M-\u003e\u003eUA: Redirect to attacker.com with MCP Authorization code\n   UA-\u003e\u003eA: MCP Authorization code delivered to attacker.com\n   Note over M,A: Attacker exchanges MCP code for MCP token\n   A-\u003e\u003eM: Attacker impersonates user to MCP server\n```",
    "#### Attack Description",
    "When an MCP proxy server uses a static client ID to authenticate with a third-party\nauthorization server that does not support dynamic client registration, the following\nattack becomes possible:",
    "1. A user authenticates normally through the MCP proxy server to access the third-party API\n2. During this flow, the third-party authorization server sets a cookie on the user agent\n   indicating consent for the static client ID\n3. An attacker later sends the user a malicious link containing a crafted authorization request which contains a malicious redirect URI along with a new dynamically registered client ID\n4. When the user clicks the link, their browser still has the consent cookie from the previous legitimate request\n5. The third-party authorization server detects the cookie and skips the consent screen\n6. The MCP authorization code is redirected to the attacker's server (specified in the crafted redirect_uri during dynamic client registration)\n7. The attacker exchanges the stolen authorization code for access tokens for the MCP server without the user's explicit approval\n8. Attacker now has access to the third-party API as the compromised user",
    "#### Mitigation",
    "MCP proxy servers using static client IDs **MUST** obtain user consent for each dynamically\nregistered client before forwarding to third-party authorization servers (which may require additional consent).",
    "### Token Passthrough",
    "\"Token passthrough\" is an anti-pattern where an MCP server accepts tokens from an MCP client without validating that the tokens were properly issued _to the MCP server_ and \"passing them through\" to the downstream API.",
    "#### Risks",
    "Token passthrough is explicitly forbidden in the [authorization specification](/specification/draft/basic/authorization) as it introduces a number of security risks, that include:",
    "- **Security Control Circumvention**\n  - The MCP Server or downstream APIs might implement important security controls like rate limiting, request validation, or traffic monitoring, that depend on the token audience or other credential constraints. If clients can obtain and use tokens directly with the downstream APIs without the MCP server validating them properly or ensuring that the tokens are issued for the right service, they bypass these controls.\n- **Accountability and Audit Trail Issues**\n  - The MCP Server will be unable to identify or distinguish between MCP Clients when clients are calling with an upstream-issued access token which may be opaque to the MCP Server.\n  - The downstream Resource Server’s logs may show requests that appear to come from a different source with a different identity, rather than the MCP server that is actually forwarding the tokens.\n  - Both factors make incident investigation, controls, and auditing more difficult.\n  - If the MCP Server passes tokens without validating their claims (e.g., roles, privileges, or audience) or other metadata, a malicious actor in possession of a stolen token can use the server as a proxy for data exfiltration.\n- **Trust Boundary Issues**\n  - The downstream Resource Server grants trust to specific entities. This trust might include assumptions about origin or client behavior patterns. Breaking this trust boundary could lead to unexpected issues.\n  - If the token is accepted by multiple services without proper validation, an attacker compromising one service can use the token to access other connected services.\n- **Future Compatibility Risk**\n  - Even if an MCP Server starts as a \"pure proxy\" today, it might need to add security controls later. Starting with proper token audience separation makes it easier to evolve the security model.",
    "#### Mitigation",
    "MCP servers **MUST NOT** accept any tokens that were not explicitly issued for the MCP server.",
    "### Session Hijacking",
    "Session hijacking is an attack vector where a client is provided a session ID by the server, and an unauthorized party is able to obtain and use that same session ID to impersonate the original client and perform unauthorized actions on their behalf.",
    "#### Session Hijack Prompt Injection",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant ServerA\n    participant Queue\n    participant ServerB\n    participant Attacker",
    "Client-\u003e\u003eServerA: Initialize (connect to streamable HTTP server)\n    ServerA--\u003e\u003eClient: Respond with session ID",
    "Attacker-\u003e\u003eServerB: Access/guess session ID\n    Note right of Attacker: Attacker knows/guesses session ID",
    "Attacker-\u003e\u003eServerB: Trigger event (malicious payload, using session ID)\n    ServerB-\u003e\u003eQueue: Enqueue event (keyed by session ID)",
    "ServerA-\u003e\u003eQueue: Poll for events (using session ID)\n    Queue--\u003e\u003eServerA: Event data (malicious payload)",
    "ServerA--\u003e\u003eClient: Async response (malicious payload)\n    Client-\u003e\u003eClient: Acts based on malicious payload\n```",
    "#### Session Hijack Impersonation",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server\n    participant Attacker",
    "Client-\u003e\u003eServer: Initialize (login/authenticate)\n    Server--\u003e\u003eClient: Respond with session ID (persistent session created)",
    "Attacker-\u003e\u003eServer: Access/guess session ID\n    Note right of Attacker: Attacker knows/guesses session ID",
    "Attacker-\u003e\u003eServer: Make API call (using session ID, no re-auth)\n    Server--\u003e\u003eAttacker: Respond as if Attacker is Client (session hijack)\n```",
    "#### Attack Description",
    "When you have multiple stateful HTTP servers that handle MCP requests, the following attack vectors are possible:",
    "**Session Hijack Prompt Injection**",
    "1. The client connects to **Server A** and receives a session ID.\n1. The attacker obtains an existing session ID and sends a malicious event to **Server B** with said session ID.",
    "- When a server supports [redelivery/resumable streams](/specification/draft/basic/transports#resumability-and-redelivery), deliberately terminating the request before receiving the response could lead to it being resumed by the original client via the GET request for server sent events.\n   - If a particular server initiates server sent events as a consequence of a tool call such as a `notifications/tools/list_changed`, where it is possible to affect the tools that are offered by the server, a client could end up with tools that they were not aware were enabled.",
    "1. **Server B** enqueues the event (associated with session ID) into a shared queue.\n1. **Server A** polls the queue for events using the session ID and retrieves the malicious payload.\n1. **Server A** sends the malicious payload to the client as an asynchronous or resumed response.\n1. The client receives and acts on the malicious payload, leading to potential compromise.",
    "**Session Hijack Impersonation**",
    "1. The MCP client authenticates with the MCP server, creating a persistent session ID.\n2. The attacker obtains the session ID.\n3. The attacker makes calls to the MCP server using the session ID.\n4. MCP server does not check for additional authorization and treats the attacker as a legitimate user, allowing unauthorized access or actions.",
    "#### Mitigation",
    "To prevent session hijacking and event injection attacks, the following mitigations should be implemented:",
    "MCP servers that implement authorization **MUST** verify all inbound requests.\nMCP Servers **MUST NOT** use sessions for authentication.",
    "MCP servers **MUST** use secure, non-deterministic session IDs.\nGenerated session IDs (e.g., UUIDs) **SHOULD** use secure random number generators. Avoid predictable or sequential session identifiers that could be guessed by an attacker. Rotating or expiring session IDs can also reduce the risk.",
    "MCP servers **SHOULD** bind session IDs to user-specific information.\nWhen storing or transmitting session-related data (e.g., in a queue), combine the session ID with information unique to the authorized user, such as their internal user ID. Use a key format like `\u003cuser_id\u003e:\u003csession_id\u003e`. This ensures that even if an attacker guesses a session ID, they cannot impersonate another user as the user ID is derived from the user token and not provided by the client.",
    "MCP servers can optionally leverage additional unique identifiers.",
    "---\ntitle: Transports\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "MCP uses JSON-RPC to encode messages. JSON-RPC messages **MUST** be UTF-8 encoded.",
    "The protocol currently defines two standard transport mechanisms for client-server\ncommunication:",
    "1. [stdio](#stdio), communication over standard in and standard out\n2. [Streamable HTTP](#streamable-http)",
    "Clients **SHOULD** support stdio whenever possible.",
    "It is also possible for clients and servers to implement\n[custom transports](#custom-transports) in a pluggable fashion.",
    "## stdio",
    "In the **stdio** transport:",
    "- The client launches the MCP server as a subprocess.\n- The server reads JSON-RPC messages from its standard input (`stdin`) and sends messages\n  to its standard output (`stdout`).\n- Messages are individual JSON-RPC requests, notifications, or responses.\n- Messages are delimited by newlines, and **MUST NOT** contain embedded newlines.\n- The server **MAY** write UTF-8 strings to its standard error (`stderr`) for logging\n  purposes. Clients **MAY** capture, forward, or ignore this logging.\n- The server **MUST NOT** write anything to its `stdout` that is not a valid MCP message.\n- The client **MUST NOT** write anything to the server's `stdin` that is not a valid MCP\n  message.",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server Process",
    "Client-\u003e\u003e+Server Process: Launch subprocess\n    loop Message Exchange\n        Client-\u003e\u003eServer Process: Write to stdin\n        Server Process-\u003e\u003eClient: Write to stdout\n        Server Process--)Client: Optional logs on stderr\n    end\n    Client-\u003e\u003eServer Process: Close stdin, terminate subprocess\n    deactivate Server Process\n```",
    "## Streamable HTTP",
    "\u003cInfo\u003e",
    "This replaces the [HTTP+SSE\ntransport](/specification/2024-11-05/basic/transports#http-with-sse) from\nprotocol version 2024-11-05. See the [backwards compatibility](#backwards-compatibility)\nguide below.",
    "\u003c/Info\u003e",
    "In the **Streamable HTTP** transport, the server operates as an independent process that\ncan handle multiple client connections. This transport uses HTTP POST and GET requests.\nServer can optionally make use of\n[Server-Sent Events](https://en.wikipedia.org/wiki/Server-sent_events) (SSE) to stream\nmultiple server messages. This permits basic MCP servers, as well as more feature-rich\nservers supporting streaming and server-to-client notifications and requests.",
    "The server **MUST** provide a single HTTP endpoint path (hereafter referred to as the\n**MCP endpoint**) that supports both POST and GET methods. For example, this could be a\nURL like `https://example.com/mcp`.",
    "#### Security Warning",
    "When implementing Streamable HTTP transport:",
    "1. Servers **MUST** validate the `Origin` header on all incoming connections to prevent DNS rebinding attacks\n2. When running locally, servers **SHOULD** bind only to localhost (127.0.0.1) rather than all network interfaces (0.0.0.0)\n3. Servers **SHOULD** implement proper authentication for all connections",
    "Without these protections, attackers could use DNS rebinding to interact with local MCP servers from remote websites.",
    "### Sending Messages to the Server",
    "Every JSON-RPC message sent from the client **MUST** be a new HTTP POST request to the\nMCP endpoint.",
    "1. The client **MUST** use HTTP POST to send JSON-RPC messages to the MCP endpoint.\n2. The client **MUST** include an `Accept` header, listing both `application/json` and\n   `text/event-stream` as supported content types.\n3. The body of the POST request **MUST** be a single JSON-RPC _request_, _notification_, or _response_.\n4. If the input is a JSON-RPC _response_ or _notification_:\n   - If the server accepts the input, the server **MUST** return HTTP status code 202\n     Accepted with no body.\n   - If the server cannot accept the input, it **MUST** return an HTTP error status code\n     (e.g., 400 Bad Request). The HTTP response body **MAY** comprise a JSON-RPC _error\n     response_ that has no `id`.\n5. If the input is a JSON-RPC _request_, the server **MUST** either\n   return `Content-Type: text/event-stream`, to initiate an SSE stream, or\n   `Content-Type: application/json`, to return one JSON object. The client **MUST**\n   support both these cases.\n6. If the server initiates an SSE stream:\n   - The SSE stream **SHOULD** eventually include JSON-RPC _response_ for the\n     JSON-RPC _request_ sent in the POST body.\n   - The server **MAY** send JSON-RPC _requests_ and _notifications_ before sending the\n     JSON-RPC _response_. These messages **SHOULD** relate to the originating client\n     _request_.\n   - The server **SHOULD NOT** close the SSE stream before sending the JSON-RPC _response_\n     for the received JSON-RPC _request_, unless the [session](#session-management)\n     expires.\n   - After the JSON-RPC _response_ has been sent, the server **SHOULD** close the SSE\n     stream.\n   - Disconnection **MAY** occur at any time (e.g., due to network conditions).\n     Therefore:\n     - Disconnection **SHOULD NOT** be interpreted as the client cancelling its request.\n     - To cancel, the client **SHOULD** explicitly send an MCP `CancelledNotification`.\n     - To avoid message loss due to disconnection, the server **MAY** make the stream\n       [resumable](#resumability-and-redelivery).",
    "### Listening for Messages from the Server",
    "1. The client **MAY** issue an HTTP GET to the MCP endpoint. This can be used to open an\n   SSE stream, allowing the server to communicate to the client, without the client first\n   sending data via HTTP POST.\n2. The client **MUST** include an `Accept` header, listing `text/event-stream` as a\n   supported content type.\n3. The server **MUST** either return `Content-Type: text/event-stream` in response to\n   this HTTP GET, or else return HTTP 405 Method Not Allowed, indicating that the server\n   does not offer an SSE stream at this endpoint.\n4. If the server initiates an SSE stream:\n   - The server **MAY** send JSON-RPC _requests_ and _notifications_ on the stream.\n   - These messages **SHOULD** be unrelated to any concurrently-running JSON-RPC\n     _request_ from the client.\n   - The server **MUST NOT** send a JSON-RPC _response_ on the stream **unless**\n     [resuming](#resumability-and-redelivery) a stream associated with a previous client\n     request.\n   - The server **MAY** close the SSE stream at any time.\n   - The client **MAY** close the SSE stream at any time.",
    "### Multiple Connections",
    "1. The client **MAY** remain connected to multiple SSE streams simultaneously.\n2. The server **MUST** send each of its JSON-RPC messages on only one of the connected\n   streams; that is, it **MUST NOT** broadcast the same message across multiple streams.\n   - The risk of message loss **MAY** be mitigated by making the stream\n     [resumable](#resumability-and-redelivery).",
    "### Resumability and Redelivery",
    "To support resuming broken connections, and redelivering messages that might otherwise be\nlost:",
    "1. Servers **MAY** attach an `id` field to their SSE events, as described in the\n   [SSE standard](https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation).\n   - If present, the ID **MUST** be globally unique across all streams within that\n     [session](#session-management)—or all streams with that specific client, if session\n     management is not in use.\n2. If the client wishes to resume after a broken connection, it **SHOULD** issue an HTTP\n   GET to the MCP endpoint, and include the\n   [`Last-Event-ID`](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-last-event-id-header)\n   header to indicate the last event ID it received.\n   - The server **MAY** use this header to replay messages that would have been sent\n     after the last event ID, _on the stream that was disconnected_, and to resume the\n     stream from that point.\n   - The server **MUST NOT** replay messages that would have been delivered on a\n     different stream.",
    "In other words, these event IDs should be assigned by servers on a _per-stream_ basis, to\nact as a cursor within that particular stream.",
    "### Session Management",
    "An MCP \"session\" consists of logically related interactions between a client and a\nserver, beginning with the [initialization phase](/specification/draft/basic/lifecycle). To support\nservers which want to establish stateful sessions:",
    "1. A server using the Streamable HTTP transport **MAY** assign a session ID at\n   initialization time, by including it in an `Mcp-Session-Id` header on the HTTP\n   response containing the `InitializeResult`.\n   - The session ID **SHOULD** be globally unique and cryptographically secure (e.g., a\n     securely generated UUID, a JWT, or a cryptographic hash).\n   - The session ID **MUST** only contain visible ASCII characters (ranging from 0x21 to\n     0x7E).\n2. If an `Mcp-Session-Id` is returned by the server during initialization, clients using\n   the Streamable HTTP transport **MUST** include it in the `Mcp-Session-Id` header on\n   all of their subsequent HTTP requests.\n   - Servers that require a session ID **SHOULD** respond to requests without an\n     `Mcp-Session-Id` header (other than initialization) with HTTP 400 Bad Request.\n3. The server **MAY** terminate the session at any time, after which it **MUST** respond\n   to requests containing that session ID with HTTP 404 Not Found.\n4. When a client receives HTTP 404 in response to a request containing an\n   `Mcp-Session-Id`, it **MUST** start a new session by sending a new `InitializeRequest`\n   without a session ID attached.\n5. Clients that no longer need a particular session (e.g., because the user is leaving\n   the client application) **SHOULD** send an HTTP DELETE to the MCP endpoint with the\n   `Mcp-Session-Id` header, to explicitly terminate the session.\n   - The server **MAY** respond to this request with HTTP 405 Method Not Allowed,\n     indicating that the server does not allow clients to terminate sessions.",
    "### Sequence Diagram",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "note over Client, Server: initialization",
    "Client-\u003e\u003e+Server: POST InitializeRequest\n    Server-\u003e\u003e-Client: InitializeResponse\u003cbr\u003eMcp-Session-Id: 1868a90c...",
    "Client-\u003e\u003e+Server: POST InitializedNotification\u003cbr\u003eMcp-Session-Id: 1868a90c...\n    Server-\u003e\u003e-Client: 202 Accepted",
    "note over Client, Server: client requests\n    Client-\u003e\u003e+Server: POST ... request ...\u003cbr\u003eMcp-Session-Id: 1868a90c...",
    "alt single HTTP response\n      Server-\u003e\u003eClient: ... response ...\n    else server opens SSE stream\n      loop while connection remains open\n          Server-)Client: ... SSE messages from server ...\n      end\n      Server-)Client: SSE event: ... response ...\n    end\n    deactivate Server",
    "note over Client, Server: client notifications/responses\n    Client-\u003e\u003e+Server: POST ... notification/response ...\u003cbr\u003eMcp-Session-Id: 1868a90c...\n    Server-\u003e\u003e-Client: 202 Accepted",
    "note over Client, Server: server requests\n    Client-\u003e\u003e+Server: GET\u003cbr\u003eMcp-Session-Id: 1868a90c...\n    loop while connection remains open\n        Server-)Client: ... SSE messages from server ...\n    end\n    deactivate Server",
    "```",
    "### Protocol Version Header",
    "If using HTTP, the client **MUST** include the `MCP-Protocol-Version:\n\u003cprotocol-version\u003e` HTTP header on all subsequent requests to the MCP\nserver, allowing the MCP server to respond based on the MCP protocol version.",
    "For example: `MCP-Protocol-Version: 2025-06-18`",
    "The protocol version sent by the client **SHOULD** be the one [negotiated during\ninitialization](/specification/draft/basic/lifecycle#version-negotiation).",
    "For backwards compatibility, if the server does _not_ receive an `MCP-Protocol-Version`\nheader, and has no other way to identify the version - for example, by relying on the\nprotocol version negotiated during initialization - the server **SHOULD** assume protocol\nversion `2025-06-18`.",
    "If the server receives a request with an invalid or unsupported\n`MCP-Protocol-Version`, it **MUST** respond with `400 Bad Request`.",
    "### Backwards Compatibility",
    "Clients and servers can maintain backwards compatibility with the deprecated [HTTP+SSE\ntransport](/specification/2024-11-05/basic/transports#http-with-sse) (from\nprotocol version 2024-11-05) as follows:",
    "**Servers** wanting to support older clients should:",
    "- Continue to host both the SSE and POST endpoints of the old transport, alongside the\n  new \"MCP endpoint\" defined for the Streamable HTTP transport.\n  - It is also possible to combine the old POST endpoint and the new MCP endpoint, but\n    this may introduce unneeded complexity.",
    "**Clients** wanting to support older servers should:",
    "1. Accept an MCP server URL from the user, which may point to either a server using the\n   old transport or the new transport.\n2. Attempt to POST an `InitializeRequest` to the server URL, with an `Accept` header as\n   defined above:\n   - If it succeeds, the client can assume this is a server supporting the new Streamable\n     HTTP transport.\n   - If it fails with an HTTP 4xx status code (e.g., 405 Method Not Allowed or 404 Not\n     Found):\n     - Issue a GET request to the server URL, expecting that this will open an SSE stream\n       and return an `endpoint` event as the first event.\n     - When the `endpoint` event arrives, the client can assume this is a server running\n       the old HTTP+SSE transport, and should use that transport for all subsequent\n       communication.",
    "## Custom Transports",
    "Clients and servers **MAY** implement additional custom transport mechanisms to suit\ntheir specific needs. The protocol is transport-agnostic and can be implemented over any\ncommunication channel that supports bidirectional message exchange.",
    "Implementers who choose to support custom transports **MUST** ensure they preserve the\nJSON-RPC message format and lifecycle requirements defined by MCP. Custom transports\n**SHOULD** document their specific connection establishment and message exchange patterns\nto aid interoperability.",
    "---\ntitle: Cancellation\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol (MCP) supports optional cancellation of in-progress requests\nthrough notification messages. Either side can send a cancellation notification to\nindicate that a previously-issued request should be terminated.",
    "## Cancellation Flow",
    "When a party wants to cancel an in-progress request, it sends a `notifications/cancelled`\nnotification containing:",
    "- The ID of the request to cancel\n- An optional reason string that can be logged or displayed",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/cancelled\",\n  \"params\": {\n    \"requestId\": \"123\",\n    \"reason\": \"User requested cancellation\"\n  }\n}\n```",
    "## Behavior Requirements",
    "1. Cancellation notifications **MUST** only reference requests that:\n   - Were previously issued in the same direction\n   - Are believed to still be in-progress\n2. The `initialize` request **MUST NOT** be cancelled by clients\n3. Receivers of cancellation notifications **SHOULD**:\n   - Stop processing the cancelled request\n   - Free associated resources\n   - Not send a response for the cancelled request\n4. Receivers **MAY** ignore cancellation notifications if:\n   - The referenced request is unknown\n   - Processing has already completed\n   - The request cannot be cancelled\n5. The sender of the cancellation notification **SHOULD** ignore any response to the\n   request that arrives afterward",
    "## Timing Considerations",
    "Due to network latency, cancellation notifications may arrive after request processing\nhas completed, and potentially after a response has already been sent.",
    "Both parties **MUST** handle these race conditions gracefully:",
    "```mermaid\nsequenceDiagram\n   participant Client\n   participant Server",
    "Client-\u003e\u003eServer: Request (ID: 123)\n   Note over Server: Processing starts\n   Client--)Server: notifications/cancelled (ID: 123)\n   alt\n      Note over Server: Processing may have\u003cbr/\u003ecompleted before\u003cbr/\u003ecancellation arrives\n   else If not completed\n      Note over Server: Stop processing\n   end\n```",
    "## Implementation Notes",
    "- Both parties **SHOULD** log cancellation reasons for debugging\n- Application UIs **SHOULD** indicate when cancellation is requested",
    "## Error Handling",
    "Invalid cancellation notifications **SHOULD** be ignored:",
    "- Unknown request IDs\n- Already completed requests\n- Malformed notifications",
    "This maintains the \"fire and forget\" nature of notifications while allowing for race\nconditions in asynchronous communication.",
    "---\ntitle: Ping\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol includes an optional ping mechanism that allows either party\nto verify that their counterpart is still responsive and the connection is alive.",
    "## Overview",
    "The ping functionality is implemented through a simple request/response pattern. Either\nthe client or server can initiate a ping by sending a `ping` request.",
    "## Message Format",
    "A ping request is a standard JSON-RPC request with no parameters:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"method\": \"ping\"\n}\n```",
    "## Behavior Requirements",
    "1. The receiver **MUST** respond promptly with an empty response:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"result\": {}\n}\n```",
    "2. If no response is received within a reasonable timeout period, the sender **MAY**:\n   - Consider the connection stale\n   - Terminate the connection\n   - Attempt reconnection procedures",
    "## Usage Patterns",
    "```mermaid\nsequenceDiagram\n    participant Sender\n    participant Receiver",
    "Sender-\u003e\u003eReceiver: ping request\n    Receiver-\u003e\u003eSender: empty response\n```",
    "## Implementation Considerations",
    "- Implementations **SHOULD** periodically issue pings to detect connection health\n- The frequency of pings **SHOULD** be configurable\n- Timeouts **SHOULD** be appropriate for the network environment\n- Excessive pinging **SHOULD** be avoided to reduce network overhead",
    "## Error Handling",
    "- Timeouts **SHOULD** be treated as connection failures\n- Multiple failed pings **MAY** trigger connection reset\n- Implementations **SHOULD** log ping failures for diagnostics",
    "---\ntitle: Progress\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol (MCP) supports optional progress tracking for long-running\noperations through notification messages. Either side can send progress notifications to\nprovide updates about operation status.",
    "## Progress Flow",
    "When a party wants to _receive_ progress updates for a request, it includes a\n`progressToken` in the request metadata.",
    "- Progress tokens **MUST** be a string or integer value\n- Progress tokens can be chosen by the sender using any means, but **MUST** be unique\n  across all active requests.",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"some_method\",\n  \"params\": {\n    \"_meta\": {\n      \"progressToken\": \"abc123\"\n    }\n  }\n}\n```",
    "The receiver **MAY** then send progress notifications containing:",
    "- The original progress token\n- The current progress value so far\n- An optional \"total\" value\n- An optional \"message\" value",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/progress\",\n  \"params\": {\n    \"progressToken\": \"abc123\",\n    \"progress\": 50,\n    \"total\": 100,\n    \"message\": \"Reticulating splines...\"\n  }\n}\n```",
    "- The `progress` value **MUST** increase with each notification, even if the total is\n  unknown.\n- The `progress` and the `total` values **MAY** be floating point.\n- The `message` field **SHOULD** provide relevant human readable progress information.",
    "## Behavior Requirements",
    "1. Progress notifications **MUST** only reference tokens that:",
    "- Were provided in an active request\n   - Are associated with an in-progress operation",
    "2. Receivers of progress requests **MAY**:\n   - Choose not to send any progress notifications\n   - Send notifications at whatever frequency they deem appropriate\n   - Omit the total value if unknown",
    "```mermaid\nsequenceDiagram\n    participant Sender\n    participant Receiver",
    "Note over Sender,Receiver: Request with progress token\n    Sender-\u003e\u003eReceiver: Method request with progressToken",
    "Note over Sender,Receiver: Progress updates\n    loop Progress Updates\n        Receiver--\u003e\u003eSender: Progress notification (0.2/1.0)\n        Receiver--\u003e\u003eSender: Progress notification (0.6/1.0)\n        Receiver--\u003e\u003eSender: Progress notification (1.0/1.0)\n    end",
    "Note over Sender,Receiver: Operation complete\n    Receiver-\u003e\u003eSender: Method response\n```",
    "## Implementation Notes",
    "- Senders and receivers **SHOULD** track active progress tokens\n- Both parties **SHOULD** implement rate limiting to prevent flooding\n- Progress notifications **MUST** stop after completion",
    "---\ntitle: Key Changes\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "This document lists changes made to the Model Context Protocol (MCP) specification since\nthe previous revision, [2025-06-18](/specification/2025-06-18).",
    "## Major changes",
    "## Other schema changes",
    "## Full changelog",
    "For a complete list of all changes that have been made since the last protocol revision,\n[see GitHub](https://github.com/modelcontextprotocol/specification/compare/2025-06-18...draft).",
    "---\ntitle: Elicitation\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "\u003cNote\u003e",
    "Elicitation is newly introduced in this version of the MCP specification and its design may evolve in future protocol versions.",
    "\u003c/Note\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for servers to request additional\ninformation from users through the client during interactions. This flow allows clients to\nmaintain control over user interactions and data sharing while enabling servers to gather\nnecessary information dynamically.\nServers request structured data from users with JSON schemas to validate responses.",
    "## User Interaction Model",
    "Elicitation in MCP allows servers to implement interactive workflows by enabling user input\nrequests to occur _nested_ inside other MCP server features.",
    "Implementations are free to expose elicitation through any interface pattern that suits\ntheir needs\u0026mdash;the protocol itself does not mandate any specific user interaction\nmodel.",
    "\u003cWarning\u003e",
    "For trust \u0026 safety and security:",
    "- Servers **MUST NOT** use elicitation to request sensitive information.",
    "Applications **SHOULD**:",
    "- Provide UI that makes it clear which server is requesting information\n- Allow users to review and modify their responses before sending\n- Respect user privacy and provide clear reject and cancel options",
    "\u003c/Warning\u003e",
    "## Capabilities",
    "Clients that support elicitation **MUST** declare the `elicitation` capability during\n[initialization](/specification/draft/basic/lifecycle#initialization):",
    "```json\n{\n  \"capabilities\": {\n    \"elicitation\": {}\n  }\n}\n```",
    "## Protocol Messages",
    "### Creating Elicitation Requests",
    "To request information from a user, servers send an `elicitation/create` request:",
    "#### Simple Text Request",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"elicitation/create\",\n  \"params\": {\n    \"message\": \"Please provide your GitHub username\",\n    \"requestedSchema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\"name\"]\n    }\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"action\": \"accept\",\n    \"content\": {\n      \"name\": \"octocat\"\n    }\n  }\n}\n```",
    "#### Structured Data Request",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"elicitation/create\",\n  \"params\": {\n    \"message\": \"Please provide your contact information\",\n    \"requestedSchema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"description\": \"Your full name\"\n        },\n        \"email\": {\n          \"type\": \"string\",\n          \"format\": \"email\",\n          \"description\": \"Your email address\"\n        },\n        \"age\": {\n          \"type\": \"number\",\n          \"minimum\": 18,\n          \"description\": \"Your age\"\n        }\n      },\n      \"required\": [\"name\", \"email\"]\n    }\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"action\": \"accept\",\n    \"content\": {\n      \"name\": \"Monalisa Octocat\",\n      \"email\": \"octocat@github.com\",\n      \"age\": 30\n    }\n  }\n}\n```",
    "**Reject Response Example:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"action\": \"reject\"\n  }\n}\n```",
    "**Cancel Response Example:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"action\": \"cancel\"\n  }\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant User\n    participant Client\n    participant Server",
    "Note over Server,Client: Server initiates elicitation\n    Server-\u003e\u003eClient: elicitation/create",
    "Note over Client,User: Human interaction\n    Client-\u003e\u003eUser: Present elicitation UI\n    User--\u003e\u003eClient: Provide requested information",
    "Note over Server,Client: Complete request\n    Client--\u003e\u003eServer: Return user response",
    "Note over Server: Continue processing with new information\n```",
    "## Request Schema",
    "The `requestedSchema` field allows servers to define the structure of the expected response using a restricted subset of JSON Schema. To simplify implementation for clients, elicitation schemas are limited to flat objects with primitive properties only:",
    "```json\n\"requestedSchema\": {\n  \"type\": \"object\",\n  \"properties\": {\n    \"propertyName\": {\n      \"type\": \"string\",\n      \"title\": \"Display Name\",\n      \"description\": \"Description of the property\"\n    },\n    \"anotherProperty\": {\n      \"type\": \"number\",\n      \"minimum\": 0,\n      \"maximum\": 100\n    }\n  },\n  \"required\": [\"propertyName\"]\n}\n```",
    "### Supported Schema Types",
    "The schema is restricted to these primitive types:",
    "1. **String Schema**",
    "```json\n   {\n     \"type\": \"string\",\n     \"title\": \"Display Name\",\n     \"description\": \"Description text\",\n     \"minLength\": 3,\n     \"maxLength\": 50,\n     \"pattern\": \"^[A-Za-z]+$\",\n     \"format\": \"email\"\n   }\n   ```",
    "Supported formats: `email`, `uri`, `date`, `date-time`",
    "2. **Number Schema**",
    "```json\n   {\n     \"type\": \"number\", // or \"integer\"\n     \"title\": \"Display Name\",\n     \"description\": \"Description text\",\n     \"minimum\": 0,\n     \"maximum\": 100\n   }\n   ```",
    "3. **Boolean Schema**",
    "```json\n   {\n     \"type\": \"boolean\",\n     \"title\": \"Display Name\",\n     \"description\": \"Description text\",\n     \"default\": false\n   }\n   ```",
    "4. **Enum Schema**\n   ```json\n   {\n     \"type\": \"string\",\n     \"title\": \"Display Name\",\n     \"description\": \"Description text\",\n     \"enum\": [\"option1\", \"option2\", \"option3\"],\n     \"enumNames\": [\"Option 1\", \"Option 2\", \"Option 3\"]\n   }\n   ```",
    "Clients can use this schema to:",
    "1. Generate appropriate input forms\n2. Validate user input before sending\n3. Provide better guidance to users",
    "Note that complex nested structures, arrays of objects, and other advanced JSON Schema features are intentionally not supported to simplify client implementation.",
    "## Response Actions",
    "Elicitation responses use a three-action model to clearly distinguish between different user actions:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"action\": \"accept\", // or \"reject\" or \"cancel\"\n    \"content\": {\n      \"propertyName\": \"value\",\n      \"anotherProperty\": 42\n    }\n  }\n}\n```",
    "The three response actions are:",
    "1. **Accept** (`action: \"accept\"`): User explicitly approved and submitted with data",
    "- The `content` field contains the submitted data matching the requested schema\n   - Example: User clicked \"Submit\", \"OK\", \"Confirm\", etc.",
    "2. **Reject** (`action: \"reject\"`): User explicitly rejected the request",
    "- The `content` field is typically omitted\n   - Example: User clicked \"Reject\", \"Decline\", \"No\", etc.",
    "3. **Cancel** (`action: \"cancel\"`): User dismissed without making an explicit choice\n   - The `content` field is typically omitted\n   - Example: User closed the dialog, clicked outside, pressed Escape, etc.",
    "Servers should handle each state appropriately:",
    "- **Accept**: Process the submitted data\n- **Reject**: Handle explicit rejection (e.g., offer alternatives)\n- **Cancel**: Handle dismissal (e.g., prompt again later)",
    "## Security Considerations",
    "1. Servers **MUST NOT** request sensitive information through elicitation\n2. Clients **SHOULD** implement user approval controls\n3. Both parties **SHOULD** validate elicitation content against the provided schema\n4. Clients **SHOULD** provide clear indication of which server is requesting information\n5. Clients **SHOULD** allow users to reject elicitation requests at any time\n6. Clients **SHOULD** implement rate limiting\n7. Clients **SHOULD** present elicitation requests in a way that makes it clear what information is being requested and why",
    "---\ntitle: Roots\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for clients to expose\nfilesystem \"roots\" to servers. Roots define the boundaries of where servers can operate\nwithin the filesystem, allowing them to understand which directories and files they have\naccess to. Servers can request the list of roots from supporting clients and receive\nnotifications when that list changes.",
    "## User Interaction Model",
    "Roots in MCP are typically exposed through workspace or project configuration interfaces.",
    "For example, implementations could offer a workspace/project picker that allows users to\nselect directories and files the server should have access to. This can be combined with\nautomatic workspace detection from version control systems or project files.",
    "However, implementations are free to expose roots through any interface pattern that\nsuits their needs\u0026mdash;the protocol itself does not mandate any specific user\ninteraction model.",
    "## Capabilities",
    "Clients that support roots **MUST** declare the `roots` capability during\n[initialization](/specification/draft/basic/lifecycle#initialization):",
    "```json\n{\n  \"capabilities\": {\n    \"roots\": {\n      \"listChanged\": true\n    }\n  }\n}\n```",
    "`listChanged` indicates whether the client will emit notifications when the list of roots\nchanges.",
    "## Protocol Messages",
    "### Listing Roots",
    "To retrieve roots, servers send a `roots/list` request:",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"roots/list\"\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"roots\": [\n      {\n        \"uri\": \"file:///home/user/projects/myproject\",\n        \"name\": \"My Project\"\n      }\n    ]\n  }\n}\n```",
    "### Root List Changes",
    "When roots change, clients that support `listChanged` **MUST** send a notification:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/roots/list_changed\"\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant Server\n    participant Client",
    "Note over Server,Client: Discovery\n    Server-\u003e\u003eClient: roots/list\n    Client--\u003e\u003eServer: Available roots",
    "Note over Server,Client: Changes\n    Client--)Server: notifications/roots/list_changed\n    Server-\u003e\u003eClient: roots/list\n    Client--\u003e\u003eServer: Updated roots\n```",
    "## Data Types",
    "### Root",
    "A root definition includes:",
    "- `uri`: Unique identifier for the root. This **MUST** be a `file://` URI in the current\n  specification.\n- `name`: Optional human-readable name for display purposes.",
    "Example roots for different use cases:",
    "#### Project Directory",
    "```json\n{\n  \"uri\": \"file:///home/user/projects/myproject\",\n  \"name\": \"My Project\"\n}\n```",
    "#### Multiple Repositories",
    "```json\n[\n  {\n    \"uri\": \"file:///home/user/repos/frontend\",\n    \"name\": \"Frontend Repository\"\n  },\n  {\n    \"uri\": \"file:///home/user/repos/backend\",\n    \"name\": \"Backend Repository\"\n  }\n]\n```",
    "## Error Handling",
    "Clients **SHOULD** return standard JSON-RPC errors for common failure cases:",
    "- Client does not support roots: `-32601` (Method not found)\n- Internal errors: `-32603`",
    "Example error:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -32601,\n    \"message\": \"Roots not supported\",\n    \"data\": {\n      \"reason\": \"Client does not have roots capability\"\n    }\n  }\n}\n```",
    "## Security Considerations",
    "1. Clients **MUST**:",
    "- Only expose roots with appropriate permissions\n   - Validate all root URIs to prevent path traversal\n   - Implement proper access controls\n   - Monitor root accessibility",
    "2. Servers **SHOULD**:\n   - Handle cases where roots become unavailable\n   - Respect root boundaries during operations\n   - Validate all paths against provided roots",
    "## Implementation Guidelines",
    "1. Clients **SHOULD**:",
    "- Prompt users for consent before exposing roots to servers\n   - Provide clear user interfaces for root management\n   - Validate root accessibility before exposing\n   - Monitor for root changes",
    "2. Servers **SHOULD**:\n   - Check for roots capability before usage\n   - Handle root list changes gracefully\n   - Respect root boundaries in operations\n   - Cache root information appropriately",
    "---\ntitle: Sampling\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for servers to request LLM\nsampling (\"completions\" or \"generations\") from language models via clients. This flow\nallows clients to maintain control over model access, selection, and permissions while\nenabling servers to leverage AI capabilities\u0026mdash;with no server API keys necessary.\nServers can request text, audio, or image-based interactions and optionally include\ncontext from MCP servers in their prompts.",
    "## User Interaction Model",
    "Sampling in MCP allows servers to implement agentic behaviors, by enabling LLM calls to\noccur _nested_ inside other MCP server features.",
    "Implementations are free to expose sampling through any interface pattern that suits\ntheir needs\u0026mdash;the protocol itself does not mandate any specific user interaction\nmodel.",
    "\u003cWarning\u003e",
    "For trust \u0026 safety and security, there **SHOULD** always\nbe a human in the loop with the ability to deny sampling requests.",
    "Applications **SHOULD**:",
    "- Provide UI that makes it easy and intuitive to review sampling requests\n- Allow users to view and edit prompts before sending\n- Present generated responses for review before delivery",
    "\u003c/Warning\u003e",
    "## Capabilities",
    "Clients that support sampling **MUST** declare the `sampling` capability during\n[initialization](/specification/draft/basic/lifecycle#initialization):",
    "```json\n{\n  \"capabilities\": {\n    \"sampling\": {}\n  }\n}\n```",
    "## Protocol Messages",
    "### Creating Messages",
    "To request a language model generation, servers send a `sampling/createMessage` request:",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"sampling/createMessage\",\n  \"params\": {\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"What is the capital of France?\"\n        }\n      }\n    ],\n    \"modelPreferences\": {\n      \"hints\": [\n        {\n          \"name\": \"claude-3-sonnet\"\n        }\n      ],\n      \"intelligencePriority\": 0.8,\n      \"speedPriority\": 0.5\n    },\n    \"systemPrompt\": \"You are a helpful assistant.\",\n    \"maxTokens\": 100\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"role\": \"assistant\",\n    \"content\": {\n      \"type\": \"text\",\n      \"text\": \"The capital of France is Paris.\"\n    },\n    \"model\": \"claude-3-sonnet-20240307\",\n    \"stopReason\": \"endTurn\"\n  }\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant Server\n    participant Client\n    participant User\n    participant LLM",
    "Note over Server,Client: Server initiates sampling\n    Server-\u003e\u003eClient: sampling/createMessage",
    "Note over Client,User: Human-in-the-loop review\n    Client-\u003e\u003eUser: Present request for approval\n    User--\u003e\u003eClient: Review and approve/modify",
    "Note over Client,LLM: Model interaction\n    Client-\u003e\u003eLLM: Forward approved request\n    LLM--\u003e\u003eClient: Return generation",
    "Note over Client,User: Response review\n    Client-\u003e\u003eUser: Present response for approval\n    User--\u003e\u003eClient: Review and approve/modify",
    "Note over Server,Client: Complete request\n    Client--\u003e\u003eServer: Return approved response\n```",
    "## Data Types",
    "### Messages",
    "Sampling messages can contain:",
    "#### Text Content",
    "```json\n{\n  \"type\": \"text\",\n  \"text\": \"The message content\"\n}\n```",
    "#### Image Content",
    "```json\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-image-data\",\n  \"mimeType\": \"image/jpeg\"\n}\n```",
    "#### Audio Content",
    "```json\n{\n  \"type\": \"audio\",\n  \"data\": \"base64-encoded-audio-data\",\n  \"mimeType\": \"audio/wav\"\n}\n```",
    "### Model Preferences",
    "Model selection in MCP requires careful abstraction since servers and clients may use\ndifferent AI providers with distinct model offerings. A server cannot simply request a\nspecific model by name since the client may not have access to that exact model or may\nprefer to use a different provider's equivalent model.",
    "To solve this, MCP implements a preference system that combines abstract capability\npriorities with optional model hints:",
    "#### Capability Priorities",
    "Servers express their needs through three normalized priority values (0-1):",
    "- `costPriority`: How important is minimizing costs? Higher values prefer cheaper models.\n- `speedPriority`: How important is low latency? Higher values prefer faster models.\n- `intelligencePriority`: How important are advanced capabilities? Higher values prefer\n  more capable models.",
    "#### Model Hints",
    "While priorities help select models based on characteristics, `hints` allow servers to\nsuggest specific models or model families:",
    "- Hints are treated as substrings that can match model names flexibly\n- Multiple hints are evaluated in order of preference\n- Clients **MAY** map hints to equivalent models from different providers\n- Hints are advisory\u0026mdash;clients make final model selection",
    "For example:",
    "```json\n{\n  \"hints\": [\n    { \"name\": \"claude-3-sonnet\" }, // Prefer Sonnet-class models\n    { \"name\": \"claude\" } // Fall back to any Claude model\n  ],\n  \"costPriority\": 0.3, // Cost is less important\n  \"speedPriority\": 0.8, // Speed is very important\n  \"intelligencePriority\": 0.5 // Moderate capability needs\n}\n```",
    "The client processes these preferences to select an appropriate model from its available\noptions. For instance, if the client doesn't have access to Claude models but has Gemini,\nit might map the sonnet hint to `gemini-1.5-pro` based on similar capabilities.",
    "## Error Handling",
    "Clients **SHOULD** return errors for common failure cases:",
    "Example error:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -1,\n    \"message\": \"User rejected sampling request\"\n  }\n}\n```",
    "## Security Considerations",
    "1. Clients **SHOULD** implement user approval controls\n2. Both parties **SHOULD** validate message content\n3. Clients **SHOULD** respect model preference hints\n4. Clients **SHOULD** implement rate limiting\n5. Both parties **MUST** handle sensitive data appropriately",
    "---\ntitle: Specification\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "[Model Context Protocol](https://modelcontextprotocol.io) (MCP) is an open protocol that\nenables seamless integration between LLM applications and external data sources and\ntools. Whether you're building an AI-powered IDE, enhancing a chat interface, or creating\ncustom AI workflows, MCP provides a standardized way to connect LLMs with the context\nthey need.",
    "This specification defines the authoritative protocol requirements, based on the\nTypeScript schema in\n[schema.ts](https://github.com/modelcontextprotocol/specification/blob/main/schema/draft/schema.ts).",
    "For implementation guides and examples, visit\n[modelcontextprotocol.io](https://modelcontextprotocol.io).",
    "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD\nNOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be\ninterpreted as described in [BCP 14](https://datatracker.ietf.org/doc/html/bcp14)\n[[RFC2119](https://datatracker.ietf.org/doc/html/rfc2119)]\n[[RFC8174](https://datatracker.ietf.org/doc/html/rfc8174)] when, and only when, they\nappear in all capitals, as shown here.",
    "## Overview",
    "MCP provides a standardized way for applications to:",
    "- Share contextual information with language models\n- Expose tools and capabilities to AI systems\n- Build composable integrations and workflows",
    "The protocol uses [JSON-RPC](https://www.jsonrpc.org/) 2.0 messages to establish\ncommunication between:",
    "- **Hosts**: LLM applications that initiate connections\n- **Clients**: Connectors within the host application\n- **Servers**: Services that provide context and capabilities",
    "MCP takes some inspiration from the\n[Language Server Protocol](https://microsoft.github.io/language-server-protocol/), which\nstandardizes how to add support for programming languages across a whole ecosystem of\ndevelopment tools. In a similar way, MCP standardizes how to integrate additional context\nand tools into the ecosystem of AI applications.",
    "## Key Details",
    "### Base Protocol",
    "- [JSON-RPC](https://www.jsonrpc.org/) message format\n- Stateful connections\n- Server and client capability negotiation",
    "### Features",
    "Servers offer any of the following features to clients:",
    "- **Resources**: Context and data, for the user or the AI model to use\n- **Prompts**: Templated messages and workflows for users\n- **Tools**: Functions for the AI model to execute",
    "Clients may offer the following features to servers:",
    "- **Sampling**: Server-initiated agentic behaviors and recursive LLM interactions\n- **Roots**: Server-initiated inquiries into uri or filesystem boundaries to operate in\n- **Elicitation**: Server-initiated requests for additional information from users",
    "### Additional Utilities",
    "- Configuration\n- Progress tracking\n- Cancellation\n- Error reporting\n- Logging",
    "## Security and Trust \u0026 Safety",
    "The Model Context Protocol enables powerful capabilities through arbitrary data access\nand code execution paths. With this power comes important security and trust\nconsiderations that all implementors must carefully address.",
    "### Key Principles",
    "1. **User Consent and Control**",
    "- Users must explicitly consent to and understand all data access and operations\n   - Users must retain control over what data is shared and what actions are taken\n   - Implementors should provide clear UIs for reviewing and authorizing activities",
    "2. **Data Privacy**",
    "- Hosts must obtain explicit user consent before exposing user data to servers\n   - Hosts must not transmit resource data elsewhere without user consent\n   - User data should be protected with appropriate access controls",
    "3. **Tool Safety**",
    "- Tools represent arbitrary code execution and must be treated with appropriate\n     caution.\n     - In particular, descriptions of tool behavior such as annotations should be\n       considered untrusted, unless obtained from a trusted server.\n   - Hosts must obtain explicit user consent before invoking any tool\n   - Users should understand what each tool does before authorizing its use",
    "4. **LLM Sampling Controls**\n   - Users must explicitly approve any LLM sampling requests\n   - Users should control:\n     - Whether sampling occurs at all\n     - The actual prompt that will be sent\n     - What results the server can see\n   - The protocol intentionally limits server visibility into prompts",
    "### Implementation Guidelines",
    "While MCP itself cannot enforce these security principles at the protocol level,\nimplementors **SHOULD**:",
    "1. Build robust consent and authorization flows into their applications\n2. Provide clear documentation of security implications\n3. Implement appropriate access controls and data protections\n4. Follow security best practices in their integrations\n5. Consider privacy implications in their feature designs",
    "## Learn More",
    "Explore the detailed specification for each protocol component:",
    "\u003cCardGroup cols={5}\u003e\n  \u003cCard\n    title=\"Architecture\"\n    icon=\"sitemap\"\n    href=\"/specification/draft/architecture\"\n  /\u003e\n  \u003cCard title=\"Base Protocol\" icon=\"code\" href=\"/specification/draft/basic\" /\u003e\n  \u003cCard\n    title=\"Server Features\"\n    icon=\"server\"\n    href=\"/specification/draft/server\"\n  /\u003e\n  \u003cCard\n    title=\"Client Features\"\n    icon=\"user\"\n    href=\"/specification/draft/client\"\n  /\u003e\n  \u003cCard title=\"Contributing\" icon=\"pencil\" href=\"/development/contributing\" /\u003e\n\u003c/CardGroup\u003e",
    "---\ntitle: Overview\n---",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "Servers provide the fundamental building blocks for adding context to language models via\nMCP. These primitives enable rich interactions between clients, servers, and language\nmodels:",
    "- **Prompts**: Pre-defined templates or instructions that guide language model\n  interactions\n- **Resources**: Structured data or content that provides additional context to the model\n- **Tools**: Executable functions that allow models to perform actions or retrieve\n  information",
    "Each primitive can be summarized in the following control hierarchy:",
    "| Primitive | Control                | Description                                        | Example                         |\n| --------- | ---------------------- | -------------------------------------------------- | ------------------------------- |\n| Prompts   | User-controlled        | Interactive templates invoked by user choice       | Slash commands, menu options    |\n| Resources | Application-controlled | Contextual data attached and managed by the client | File contents, git history      |\n| Tools     | Model-controlled       | Functions exposed to the LLM to take actions       | API POST requests, file writing |",
    "Explore these key primitives in more detail below:",
    "\u003cCardGroup cols={3}\u003e\n  \u003cCard\n    title=\"Prompts\"\n    icon=\"message\"\n    href=\"/specification/draft/server/prompts\"\n  /\u003e\n  \u003cCard\n    title=\"Resources\"\n    icon=\"file-lines\"\n    href=\"/specification/draft/server/resources\"\n  /\u003e\n  \u003cCard title=\"Tools\" icon=\"wrench\" href=\"/specification/draft/server/tools\" /\u003e\n\u003c/CardGroup\u003e",
    "---\ntitle: Prompts\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for servers to expose prompt\ntemplates to clients. Prompts allow servers to provide structured messages and\ninstructions for interacting with language models. Clients can discover available\nprompts, retrieve their contents, and provide arguments to customize them.",
    "## User Interaction Model",
    "Prompts are designed to be **user-controlled**, meaning they are exposed from servers to\nclients with the intention of the user being able to explicitly select them for use.",
    "Typically, prompts would be triggered through user-initiated commands in the user\ninterface, which allows users to naturally discover and invoke available prompts.",
    "For example, as slash commands:",
    "![Example of prompt exposed as slash command](/specification/draft/server/slash-command.png)",
    "However, implementors are free to expose prompts through any interface pattern that suits\ntheir needs\u0026mdash;the protocol itself does not mandate any specific user interaction\nmodel.",
    "## Capabilities",
    "Servers that support prompts **MUST** declare the `prompts` capability during\n[initialization](/specification/draft/basic/lifecycle#initialization):",
    "```json\n{\n  \"capabilities\": {\n    \"prompts\": {\n      \"listChanged\": true\n    }\n  }\n}\n```",
    "`listChanged` indicates whether the server will emit notifications when the list of\navailable prompts changes.",
    "## Protocol Messages",
    "### Listing Prompts",
    "To retrieve available prompts, clients send a `prompts/list` request. This operation\nsupports [pagination](/specification/draft/server/utilities/pagination).",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"prompts/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"prompts\": [\n      {\n        \"name\": \"code_review\",\n        \"title\": \"Request Code Review\",\n        \"description\": \"Asks the LLM to analyze code quality and suggest improvements\",\n        \"arguments\": [\n          {\n            \"name\": \"code\",\n            \"description\": \"The code to review\",\n            \"required\": true\n          }\n        ]\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```",
    "### Getting a Prompt",
    "To retrieve a specific prompt, clients send a `prompts/get` request. Arguments may be\nauto-completed through [the completion API](/specification/draft/server/utilities/completion).",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"prompts/get\",\n  \"params\": {\n    \"name\": \"code_review\",\n    \"arguments\": {\n      \"code\": \"def hello():\\n    print('world')\"\n    }\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"description\": \"Code review prompt\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"Please review this Python code:\\ndef hello():\\n    print('world')\"\n        }\n      }\n    ]\n  }\n}\n```",
    "### List Changed Notification",
    "When the list of available prompts changes, servers that declared the `listChanged`\ncapability **SHOULD** send a notification:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/prompts/list_changed\"\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Note over Client,Server: Discovery\n    Client-\u003e\u003eServer: prompts/list\n    Server--\u003e\u003eClient: List of prompts",
    "Note over Client,Server: Usage\n    Client-\u003e\u003eServer: prompts/get\n    Server--\u003e\u003eClient: Prompt content",
    "opt listChanged\n      Note over Client,Server: Changes\n      Server--)Client: prompts/list_changed\n      Client-\u003e\u003eServer: prompts/list\n      Server--\u003e\u003eClient: Updated prompts\n    end\n```",
    "## Data Types",
    "### Prompt",
    "A prompt definition includes:",
    "- `name`: Unique identifier for the prompt\n- `title`: Optional human-readable name of the prompt for display purposes.\n- `description`: Optional human-readable description\n- `arguments`: Optional list of arguments for customization",
    "### PromptMessage",
    "Messages in a prompt can contain:",
    "- `role`: Either \"user\" or \"assistant\" to indicate the speaker\n- `content`: One of the following content types:",
    "#### Text Content",
    "Text content represents plain text messages:",
    "```json\n{\n  \"type\": \"text\",\n  \"text\": \"The text content of the message\"\n}\n```",
    "This is the most common content type used for natural language interactions.",
    "#### Image Content",
    "Image content allows including visual information in messages:",
    "```json\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-image-data\",\n  \"mimeType\": \"image/png\"\n}\n```",
    "The image data **MUST** be base64-encoded and include a valid MIME type. This enables\nmulti-modal interactions where visual context is important.",
    "#### Audio Content",
    "Audio content allows including audio information in messages:",
    "```json\n{\n  \"type\": \"audio\",\n  \"data\": \"base64-encoded-audio-data\",\n  \"mimeType\": \"audio/wav\"\n}\n```",
    "The audio data MUST be base64-encoded and include a valid MIME type. This enables\nmulti-modal interactions where audio context is important.",
    "#### Embedded Resources",
    "Embedded resources allow referencing server-side resources directly in messages:",
    "```json\n{\n  \"type\": \"resource\",\n  \"resource\": {\n    \"uri\": \"resource://example\",\n    \"name\": \"example\",\n    \"title\": \"My Example Resource\",\n    \"mimeType\": \"text/plain\",\n    \"text\": \"Resource content\"\n  }\n}\n```",
    "Resources can contain either text or binary (blob) data and **MUST** include:",
    "- A valid resource URI\n- The appropriate MIME type\n- Either text content or base64-encoded blob data",
    "Embedded resources enable prompts to seamlessly incorporate server-managed content like\ndocumentation, code samples, or other reference materials directly into the conversation\nflow.",
    "## Error Handling",
    "Servers **SHOULD** return standard JSON-RPC errors for common failure cases:",
    "- Invalid prompt name: `-32602` (Invalid params)\n- Missing required arguments: `-32602` (Invalid params)\n- Internal errors: `-32603` (Internal error)",
    "## Implementation Considerations",
    "1. Servers **SHOULD** validate prompt arguments before processing\n2. Clients **SHOULD** handle pagination for large prompt lists\n3. Both parties **SHOULD** respect capability negotiation",
    "## Security",
    "Implementations **MUST** carefully validate all prompt inputs and outputs to prevent\ninjection attacks or unauthorized access to resources.",
    "---\ntitle: Resources\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for servers to expose\nresources to clients. Resources allow servers to share data that provides context to\nlanguage models, such as files, database schemas, or application-specific information.\nEach resource is uniquely identified by a\n[URI](https://datatracker.ietf.org/doc/html/rfc3986).",
    "## User Interaction Model",
    "Resources in MCP are designed to be **application-driven**, with host applications\ndetermining how to incorporate context based on their needs.",
    "For example, applications could:",
    "- Expose resources through UI elements for explicit selection, in a tree or list view\n- Allow the user to search through and filter available resources\n- Implement automatic context inclusion, based on heuristics or the AI model's selection",
    "![Example of resource context picker](/specification/draft/server/resource-picker.png)",
    "However, implementations are free to expose resources through any interface pattern that\nsuits their needs\u0026mdash;the protocol itself does not mandate any specific user\ninteraction model.",
    "## Capabilities",
    "Servers that support resources **MUST** declare the `resources` capability:",
    "```json\n{\n  \"capabilities\": {\n    \"resources\": {\n      \"subscribe\": true,\n      \"listChanged\": true\n    }\n  }\n}\n```",
    "The capability supports two optional features:",
    "- `subscribe`: whether the client can subscribe to be notified of changes to individual\n  resources.\n- `listChanged`: whether the server will emit notifications when the list of available\n  resources changes.",
    "Both `subscribe` and `listChanged` are optional\u0026mdash;servers can support neither,\neither, or both:",
    "```json\n{\n  \"capabilities\": {\n    \"resources\": {} // Neither feature supported\n  }\n}\n```",
    "```json\n{\n  \"capabilities\": {\n    \"resources\": {\n      \"subscribe\": true // Only subscriptions supported\n    }\n  }\n}\n```",
    "```json\n{\n  \"capabilities\": {\n    \"resources\": {\n      \"listChanged\": true // Only list change notifications supported\n    }\n  }\n}\n```",
    "## Protocol Messages",
    "### Listing Resources",
    "To discover available resources, clients send a `resources/list` request. This operation\nsupports [pagination](/specification/draft/server/utilities/pagination).",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"resources/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"resources\": [\n      {\n        \"uri\": \"file:///project/src/main.rs\",\n        \"name\": \"main.rs\",\n        \"title\": \"Rust Software Application Main File\",\n        \"description\": \"Primary application entry point\",\n        \"mimeType\": \"text/x-rust\"\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```",
    "### Reading Resources",
    "To retrieve resource contents, clients send a `resources/read` request:",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"resources/read\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\"\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"contents\": [\n      {\n        \"uri\": \"file:///project/src/main.rs\",\n        \"name\": \"main.rs\",\n        \"title\": \"Rust Software Application Main File\",\n        \"mimeType\": \"text/x-rust\",\n        \"text\": \"fn main() {\\n    println!(\\\"Hello world!\\\");\\n}\"\n      }\n    ]\n  }\n}\n```",
    "### Resource Templates",
    "Resource templates allow servers to expose parameterized resources using\n[URI templates](https://datatracker.ietf.org/doc/html/rfc6570). Arguments may be\nauto-completed through [the completion API](/specification/draft/server/utilities/completion).",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"resources/templates/list\"\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"resourceTemplates\": [\n      {\n        \"uriTemplate\": \"file:///{path}\",\n        \"name\": \"Project Files\",\n        \"title\": \"📁 Project Files\",\n        \"description\": \"Access files in the project directory\",\n        \"mimeType\": \"application/octet-stream\"\n      }\n    ]\n  }\n}\n```",
    "### List Changed Notification",
    "When the list of available resources changes, servers that declared the `listChanged`\ncapability **SHOULD** send a notification:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/resources/list_changed\"\n}\n```",
    "### Subscriptions",
    "The protocol supports optional subscriptions to resource changes. Clients can subscribe\nto specific resources and receive notifications when they change:",
    "**Subscribe Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"method\": \"resources/subscribe\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\"\n  }\n}\n```",
    "**Update Notification:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/resources/updated\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\",\n    \"title\": \"Rust Software Application Main File\"\n  }\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Note over Client,Server: Resource Discovery\n    Client-\u003e\u003eServer: resources/list\n    Server--\u003e\u003eClient: List of resources",
    "Note over Client,Server: Resource Access\n    Client-\u003e\u003eServer: resources/read\n    Server--\u003e\u003eClient: Resource contents",
    "Note over Client,Server: Subscriptions\n    Client-\u003e\u003eServer: resources/subscribe\n    Server--\u003e\u003eClient: Subscription confirmed",
    "Note over Client,Server: Updates\n    Server--)Client: notifications/resources/updated\n    Client-\u003e\u003eServer: resources/read\n    Server--\u003e\u003eClient: Updated contents\n```",
    "## Data Types",
    "### Resource",
    "A resource definition includes:",
    "- `uri`: Unique identifier for the resource\n- `name`: The name of the resource.\n- `title`: Optional human-readable name of the resource for display purposes.\n- `description`: Optional description\n- `mimeType`: Optional MIME type\n- `size`: Optional size in bytes",
    "### Resource Contents",
    "Resources can contain either text or binary data:",
    "#### Text Content",
    "```json\n{\n  \"uri\": \"file:///example.txt\",\n  \"name\": \"example.txt\",\n  \"title\": \"Example Text File\",\n  \"mimeType\": \"text/plain\",\n  \"text\": \"Resource content\"\n}\n```",
    "#### Binary Content",
    "```json\n{\n  \"uri\": \"file:///example.png\",\n  \"name\": \"example.png\",\n  \"title\": \"Example Image\",\n  \"mimeType\": \"image/png\",\n  \"blob\": \"base64-encoded-data\"\n}\n```",
    "## Common URI Schemes",
    "The protocol defines several standard URI schemes. This list not\nexhaustive\u0026mdash;implementations are always free to use additional, custom URI schemes.",
    "### https://",
    "Used to represent a resource available on the web.",
    "Servers **SHOULD** use this scheme only when the client is able to fetch and load the\nresource directly from the web on its own—that is, it doesn’t need to read the resource\nvia the MCP server.",
    "For other use cases, servers **SHOULD** prefer to use another URI scheme, or define a\ncustom one, even if the server will itself be downloading resource contents over the\ninternet.",
    "### file://",
    "Used to identify resources that behave like a filesystem. However, the resources do not\nneed to map to an actual physical filesystem.",
    "MCP servers **MAY** identify file:// resources with an\n[XDG MIME type](https://specifications.freedesktop.org/shared-mime-info-spec/0.14/ar01s02.html#id-1.3.14),\nlike `inode/directory`, to represent non-regular files (such as directories) that don’t\notherwise have a standard MIME type.",
    "### git://",
    "Git version control integration.",
    "### Custom URI Schemes",
    "Custom URI schemes **MUST** be in accordance with [RFC3986](https://datatracker.ietf.org/doc/html/rfc3986),\ntaking the above guidance in to account.",
    "## Error Handling",
    "Servers **SHOULD** return standard JSON-RPC errors for common failure cases:",
    "- Resource not found: `-32002`\n- Internal errors: `-32603`",
    "Example error:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"error\": {\n    \"code\": -32002,\n    \"message\": \"Resource not found\",\n    \"data\": {\n      \"uri\": \"file:///nonexistent.txt\"\n    }\n  }\n}\n```",
    "## Security Considerations",
    "1. Servers **MUST** validate all resource URIs\n2. Access controls **SHOULD** be implemented for sensitive resources\n3. Binary data **MUST** be properly encoded\n4. Resource permissions **SHOULD** be checked before operations",
    "---\ntitle: Tools\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol (MCP) allows servers to expose tools that can be invoked by\nlanguage models. Tools enable models to interact with external systems, such as querying\ndatabases, calling APIs, or performing computations. Each tool is uniquely identified by\na name and includes metadata describing its schema.",
    "## User Interaction Model",
    "Tools in MCP are designed to be **model-controlled**, meaning that the language model can\ndiscover and invoke tools automatically based on its contextual understanding and the\nuser's prompts.",
    "However, implementations are free to expose tools through any interface pattern that\nsuits their needs\u0026mdash;the protocol itself does not mandate any specific user\ninteraction model.",
    "\u003cWarning\u003e",
    "For trust \u0026 safety and security, there **SHOULD** always\nbe a human in the loop with the ability to deny tool invocations.",
    "Applications **SHOULD**:",
    "- Provide UI that makes clear which tools are being exposed to the AI model\n- Insert clear visual indicators when tools are invoked\n- Present confirmation prompts to the user for operations, to ensure a human is in the\n  loop",
    "\u003c/Warning\u003e",
    "## Capabilities",
    "Servers that support tools **MUST** declare the `tools` capability:",
    "```json\n{\n  \"capabilities\": {\n    \"tools\": {\n      \"listChanged\": true\n    }\n  }\n}\n```",
    "`listChanged` indicates whether the server will emit notifications when the list of\navailable tools changes.",
    "## Protocol Messages",
    "### Listing Tools",
    "To discover available tools, clients send a `tools/list` request. This operation supports\n[pagination](/specification/draft/server/utilities/pagination).",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"tools\": [\n      {\n        \"name\": \"get_weather\",\n        \"title\": \"Weather Information Provider\",\n        \"description\": \"Get current weather information for a location\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"City name or zip code\"\n            }\n          },\n          \"required\": [\"location\"]\n        }\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```",
    "### Calling Tools",
    "To invoke a tool, clients send a `tools/call` request:",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"New York\"\n    }\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Current weather in New York:\\nTemperature: 72°F\\nConditions: Partly cloudy\"\n      }\n    ],\n    \"isError\": false\n  }\n}\n```",
    "### List Changed Notification",
    "When the list of available tools changes, servers that declared the `listChanged`\ncapability **SHOULD** send a notification:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/tools/list_changed\"\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant LLM\n    participant Client\n    participant Server",
    "Note over Client,Server: Discovery\n    Client-\u003e\u003eServer: tools/list\n    Server--\u003e\u003eClient: List of tools",
    "Note over Client,LLM: Tool Selection\n    LLM-\u003e\u003eClient: Select tool to use",
    "Note over Client,Server: Invocation\n    Client-\u003e\u003eServer: tools/call\n    Server--\u003e\u003eClient: Tool result\n    Client-\u003e\u003eLLM: Process result",
    "Note over Client,Server: Updates\n    Server--)Client: tools/list_changed\n    Client-\u003e\u003eServer: tools/list\n    Server--\u003e\u003eClient: Updated tools\n```",
    "## Data Types",
    "### Tool",
    "A tool definition includes:",
    "- `name`: Unique identifier for the tool\n- `title`: Optional human-readable name of the tool for display purposes.\n- `description`: Human-readable description of functionality\n- `inputSchema`: JSON Schema defining expected parameters\n- `outputSchema`: Optional JSON Schema defining expected output structure\n- `annotations`: optional properties describing tool behavior",
    "\u003cWarning\u003e",
    "For trust \u0026 safety and security, clients **MUST** consider\ntool annotations to be untrusted unless they come from trusted servers.",
    "\u003c/Warning\u003e",
    "### Tool Result",
    "Tool results may contain [**structured**](#structured-content) or **unstructured** content.",
    "**Unstructured** content is returned in the `content` field of a result, and can contain multiple content items of different types:",
    "#### Text Content",
    "```json\n{\n  \"type\": \"text\",\n  \"text\": \"Tool result text\"\n}\n```",
    "#### Image Content",
    "```json\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-data\",\n  \"mimeType\": \"image/png\"\n}\n```",
    "#### Audio Content",
    "```json\n{\n  \"type\": \"audio\",\n  \"data\": \"base64-encoded-audio-data\",\n  \"mimeType\": \"audio/wav\"\n}\n```",
    "#### Resource Links",
    "A tool **MAY** return links to [Resources](/specification/draft/server/resources), to provide additional context\nor data. In this case, the tool will return a URI that can be subscribed to or fetched by the client:",
    "```json\n{\n  \"type\": \"resource_link\",\n  \"uri\": \"file:///project/src/main.rs\",\n  \"name\": \"main.rs\",\n  \"description\": \"Primary application entry point\",\n  \"mimeType\": \"text/x-rust\"\n}\n```",
    "\u003cInfo\u003e\n  Resource links returned by tools are not guaranteed to appear in the results\n  of a `resources/list` request.\n\u003c/Info\u003e",
    "#### Embedded Resources",
    "[Resources](/specification/draft/server/resources) **MAY** be embedded to provide additional context\nor data using a suitable [URI scheme](./resources#common-uri-schemes). Servers that use embedded resources **SHOULD** implement the `resources` capability:",
    "```json\n{\n  \"type\": \"resource\",\n  \"resource\": {\n    \"uri\": \"file:///project/src/main.rs\",\n    \"title\": \"Project Rust Main File\",\n    \"mimeType\": \"text/x-rust\",\n    \"text\": \"fn main() {\\n    println!(\\\"Hello world!\\\");\\n}\"\n  }\n}\n```",
    "#### Structured Content",
    "**Structured** content is returned as a JSON object in the `structuredContent` field of a result.",
    "For backwards compatibility, a tool that returns structured content SHOULD also return functionally equivalent unstructured content.\n(For example, serialized JSON can be returned in a `TextContent` block.)",
    "#### Output Schema",
    "Tools may also provide an output schema for validation of structured results.\nIf an output schema is provided:",
    "- Servers **MUST** provide structured results that conform to this schema.\n- Clients **SHOULD** validate structured results against this schema.",
    "Example tool with output schema:",
    "```json\n{\n  \"name\": \"get_weather_data\",\n  \"title\": \"Weather Data Retriever\",\n  \"description\": \"Get current weather data for a location\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"location\": {\n        \"type\": \"string\",\n        \"description\": \"City name or zip code\"\n      }\n    },\n    \"required\": [\"location\"]\n  },\n  \"outputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"temperature\": {\n        \"type\": \"number\",\n        \"description\": \"Temperature in celsius\"\n      },\n      \"conditions\": {\n        \"type\": \"string\",\n        \"description\": \"Weather conditions description\"\n      },\n      \"humidity\": {\n        \"type\": \"number\",\n        \"description\": \"Humidity percentage\"\n      }\n    },\n    \"required\": [\"temperature\", \"conditions\", \"humidity\"]\n  }\n}\n```",
    "Example valid response for this tool:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"{\\\"temperature\\\": 22.5, \\\"conditions\\\": \\\"Partly cloudy\\\", \\\"humidity\\\": 65}\"\n      }\n    ],\n    \"structuredContent\": {\n      \"temperature\": 22.5,\n      \"conditions\": \"Partly cloudy\",\n      \"humidity\": 65\n    }\n  }\n}\n```",
    "Providing an output schema helps clients and LLMs understand and properly handle structured tool outputs by:",
    "- Enabling strict schema validation of responses\n- Providing type information for better integration with programming languages\n- Guiding clients and LLMs to properly parse and utilize the returned data\n- Supporting better documentation and developer experience",
    "## Error Handling",
    "Tools use two error reporting mechanisms:",
    "1. **Protocol Errors**: Standard JSON-RPC errors for issues like:",
    "- Unknown tools\n   - Invalid arguments\n   - Server errors",
    "2. **Tool Execution Errors**: Reported in tool results with `isError: true`:\n   - API failures\n   - Invalid input data\n   - Business logic errors",
    "Example protocol error:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"Unknown tool: invalid_tool_name\"\n  }\n}\n```",
    "Example tool execution error:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Failed to fetch weather data: API rate limit exceeded\"\n      }\n    ],\n    \"isError\": true\n  }\n}\n```",
    "## Security Considerations",
    "1. Servers **MUST**:",
    "- Validate all tool inputs\n   - Implement proper access controls\n   - Rate limit tool invocations\n   - Sanitize tool outputs",
    "2. Clients **SHOULD**:\n   - Prompt for user confirmation on sensitive operations\n   - Show tool inputs to the user before calling the server, to avoid malicious or\n     accidental data exfiltration\n   - Validate tool results before passing to LLM\n   - Implement timeouts for tool calls\n   - Log tool usage for audit purposes",
    "---\ntitle: Completion\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for servers to offer\nargument autocompletion suggestions for prompts and resource URIs. This enables rich,\nIDE-like experiences where users receive contextual suggestions while entering argument\nvalues.",
    "## User Interaction Model",
    "Completion in MCP is designed to support interactive user experiences similar to IDE code\ncompletion.",
    "For example, applications may show completion suggestions in a dropdown or popup menu as\nusers type, with the ability to filter and select from available options.",
    "However, implementations are free to expose completion through any interface pattern that\nsuits their needs\u0026mdash;the protocol itself does not mandate any specific user\ninteraction model.",
    "## Capabilities",
    "Servers that support completions **MUST** declare the `completions` capability:",
    "```json\n{\n  \"capabilities\": {\n    \"completions\": {}\n  }\n}\n```",
    "## Protocol Messages",
    "### Requesting Completions",
    "To get completion suggestions, clients send a `completion/complete` request specifying\nwhat is being completed through a reference type:",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"completion/complete\",\n  \"params\": {\n    \"ref\": {\n      \"type\": \"ref/prompt\",\n      \"name\": \"code_review\"\n    },\n    \"argument\": {\n      \"name\": \"language\",\n      \"value\": \"py\"\n    }\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"completion\": {\n      \"values\": [\"python\", \"pytorch\", \"pyside\"],\n      \"total\": 10,\n      \"hasMore\": true\n    }\n  }\n}\n```",
    "For prompts or URI templates with multiple arguments, clients should include previous completions in the `context.arguments` object to provide context for subsequent requests.",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"completion/complete\",\n  \"params\": {\n    \"ref\": {\n      \"type\": \"ref/prompt\",\n      \"name\": \"code_review\"\n    },\n    \"argument\": {\n      \"name\": \"framework\",\n      \"value\": \"fla\"\n    },\n    \"context\": {\n      \"arguments\": {\n        \"language\": \"python\"\n      }\n    }\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"completion\": {\n      \"values\": [\"flask\"],\n      \"total\": 1,\n      \"hasMore\": false\n    }\n  }\n}\n```",
    "### Reference Types",
    "The protocol supports two types of completion references:",
    "| Type           | Description                 | Example                                             |\n| -------------- | --------------------------- | --------------------------------------------------- |\n| `ref/prompt`   | References a prompt by name | `{\"type\": \"ref/prompt\", \"name\": \"code_review\"}`     |\n| `ref/resource` | References a resource URI   | `{\"type\": \"ref/resource\", \"uri\": \"file:///{path}\"}` |",
    "### Completion Results",
    "Servers return an array of completion values ranked by relevance, with:",
    "- Maximum 100 items per response\n- Optional total number of available matches\n- Boolean indicating if additional results exist",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Note over Client: User types argument\n    Client-\u003e\u003eServer: completion/complete\n    Server--\u003e\u003eClient: Completion suggestions",
    "Note over Client: User continues typing\n    Client-\u003e\u003eServer: completion/complete\n    Server--\u003e\u003eClient: Refined suggestions\n```",
    "## Data Types",
    "### CompleteRequest",
    "- `ref`: A `PromptReference` or `ResourceReference`\n- `argument`: Object containing:\n  - `name`: Argument name\n  - `value`: Current value\n- `context`: Object containing:\n  - `arguments`: A mapping of already-resolved argument names to their values.",
    "### CompleteResult",
    "- `completion`: Object containing:\n  - `values`: Array of suggestions (max 100)\n  - `total`: Optional total matches\n  - `hasMore`: Additional results flag",
    "## Error Handling",
    "Servers **SHOULD** return standard JSON-RPC errors for common failure cases:",
    "- Method not found: `-32601` (Capability not supported)\n- Invalid prompt name: `-32602` (Invalid params)\n- Missing required arguments: `-32602` (Invalid params)\n- Internal errors: `-32603` (Internal error)",
    "## Implementation Considerations",
    "1. Servers **SHOULD**:",
    "- Return suggestions sorted by relevance\n   - Implement fuzzy matching where appropriate\n   - Rate limit completion requests\n   - Validate all inputs",
    "2. Clients **SHOULD**:\n   - Debounce rapid completion requests\n   - Cache completion results where appropriate\n   - Handle missing or partial results gracefully",
    "## Security",
    "Implementations **MUST**:",
    "- Validate all completion inputs\n- Implement appropriate rate limiting\n- Control access to sensitive suggestions\n- Prevent completion-based information disclosure",
    "---\ntitle: Logging\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for servers to send\nstructured log messages to clients. Clients can control logging verbosity by setting\nminimum log levels, with servers sending notifications containing severity levels,\noptional logger names, and arbitrary JSON-serializable data.",
    "## User Interaction Model",
    "Implementations are free to expose logging through any interface pattern that suits their\nneeds\u0026mdash;the protocol itself does not mandate any specific user interaction model.",
    "## Capabilities",
    "Servers that emit log message notifications **MUST** declare the `logging` capability:",
    "```json\n{\n  \"capabilities\": {\n    \"logging\": {}\n  }\n}\n```",
    "## Log Levels",
    "The protocol follows the standard syslog severity levels specified in\n[RFC 5424](https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1):",
    "| Level     | Description                      | Example Use Case           |\n| --------- | -------------------------------- | -------------------------- |\n| debug     | Detailed debugging information   | Function entry/exit points |\n| info      | General informational messages   | Operation progress updates |\n| notice    | Normal but significant events    | Configuration changes      |\n| warning   | Warning conditions               | Deprecated feature usage   |\n| error     | Error conditions                 | Operation failures         |\n| critical  | Critical conditions              | System component failures  |\n| alert     | Action must be taken immediately | Data corruption detected   |\n| emergency | System is unusable               | Complete system failure    |",
    "## Protocol Messages",
    "### Setting Log Level",
    "To configure the minimum log level, clients **MAY** send a `logging/setLevel` request:",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"logging/setLevel\",\n  \"params\": {\n    \"level\": \"info\"\n  }\n}\n```",
    "### Log Message Notifications",
    "Servers send log messages using `notifications/message` notifications:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/message\",\n  \"params\": {\n    \"level\": \"error\",\n    \"logger\": \"database\",\n    \"data\": {\n      \"error\": \"Connection failed\",\n      \"details\": {\n        \"host\": \"localhost\",\n        \"port\": 5432\n      }\n    }\n  }\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Note over Client,Server: Configure Logging\n    Client-\u003e\u003eServer: logging/setLevel (info)\n    Server--\u003e\u003eClient: Empty Result",
    "Note over Client,Server: Server Activity\n    Server--)Client: notifications/message (info)\n    Server--)Client: notifications/message (warning)\n    Server--)Client: notifications/message (error)",
    "Note over Client,Server: Level Change\n    Client-\u003e\u003eServer: logging/setLevel (error)\n    Server--\u003e\u003eClient: Empty Result\n    Note over Server: Only sends error level\u003cbr/\u003eand above\n```",
    "## Error Handling",
    "Servers **SHOULD** return standard JSON-RPC errors for common failure cases:",
    "- Invalid log level: `-32602` (Invalid params)\n- Configuration errors: `-32603` (Internal error)",
    "## Implementation Considerations",
    "1. Servers **SHOULD**:",
    "- Rate limit log messages\n   - Include relevant context in data field\n   - Use consistent logger names\n   - Remove sensitive information",
    "2. Clients **MAY**:\n   - Present log messages in the UI\n   - Implement log filtering/search\n   - Display severity visually\n   - Persist log messages",
    "## Security",
    "1. Log messages **MUST NOT** contain:",
    "- Credentials or secrets\n   - Personal identifying information\n   - Internal system details that could aid attacks",
    "2. Implementations **SHOULD**:\n   - Rate limit messages\n   - Validate all data fields\n   - Control log access\n   - Monitor for sensitive content",
    "---\ntitle: Pagination\n---",
    "\u003cdiv id=\"enable-section-numbers\" /\u003e",
    "\u003cInfo\u003e**Protocol Revision**: draft\u003c/Info\u003e",
    "The Model Context Protocol (MCP) supports paginating list operations that may return\nlarge result sets. Pagination allows servers to yield results in smaller chunks rather\nthan all at once.",
    "Pagination is especially important when connecting to external services over the\ninternet, but also useful for local integrations to avoid performance issues with large\ndata sets.",
    "## Pagination Model",
    "Pagination in MCP uses an opaque cursor-based approach, instead of numbered pages.",
    "- The **cursor** is an opaque string token, representing a position in the result set\n- **Page size** is determined by the server, and clients **MUST NOT** assume a fixed page\n  size",
    "## Response Format",
    "Pagination starts when the server sends a **response** that includes:",
    "- The current page of results\n- An optional `nextCursor` field if more results exist",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"result\": {\n    \"resources\": [...],\n    \"nextCursor\": \"eyJwYWdlIjogM30=\"\n  }\n}\n```",
    "## Request Format",
    "After receiving a cursor, the client can _continue_ paginating by issuing a request\nincluding that cursor:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/list\",\n  \"params\": {\n    \"cursor\": \"eyJwYWdlIjogMn0=\"\n  }\n}\n```",
    "## Pagination Flow",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Client-\u003e\u003eServer: List Request (no cursor)\n    loop Pagination Loop\n      Server--\u003e\u003eClient: Page of results + nextCursor\n      Client-\u003e\u003eServer: List Request (with cursor)\n    end\n```",
    "## Operations Supporting Pagination",
    "The following MCP operations support pagination:",
    "- `resources/list` - List available resources\n- `resources/templates/list` - List resource templates\n- `prompts/list` - List available prompts\n- `tools/list` - List available tools",
    "## Implementation Guidelines",
    "1. Servers **SHOULD**:",
    "- Provide stable cursors\n   - Handle invalid cursors gracefully",
    "2. Clients **SHOULD**:",
    "- Treat a missing `nextCursor` as the end of results\n   - Support both paginated and non-paginated flows",
    "3. Clients **MUST** treat cursors as opaque tokens:\n   - Don't make assumptions about cursor format\n   - Don't attempt to parse or modify cursors\n   - Don't persist cursors across sessions",
    "## Error Handling",
    "Invalid cursors **SHOULD** result in an error with code -32602 (Invalid params)."
  ],
  "count": 1022,
  "version": "draft"
}
