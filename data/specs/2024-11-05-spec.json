{
  "chunks": [
    "---\ntitle: Architecture\n---",
    "The Model Context Protocol (MCP) follows a client-host-server architecture where each\nhost can run multiple client instances. This architecture enables users to integrate AI\ncapabilities across applications while maintaining clear security boundaries and\nisolating concerns. Built on JSON-RPC, MCP provides a stateful session protocol focused\non context exchange and sampling coordination between clients and servers.",
    "## Core Components",
    "```mermaid\ngraph LR\n    subgraph \"Application Host Process\"\n        H[Host]\n        C1[Client 1]\n        C2[Client 2]\n        C3[Client 3]\n        H --\u003e C1\n        H --\u003e C2\n        H --\u003e C3\n    end",
    "subgraph \"Local machine\"\n        S1[Server 1\u003cbr\u003eFiles \u0026 Git]\n        S2[Server 2\u003cbr\u003eDatabase]\n        R1[(\"Local\u003cbr\u003eResource A\")]\n        R2[(\"Local\u003cbr\u003eResource B\")]",
    "C1 --\u003e S1\n        C2 --\u003e S2\n        S1 \u003c--\u003e R1\n        S2 \u003c--\u003e R2\n    end",
    "subgraph \"Internet\"\n        S3[Server 3\u003cbr\u003eExternal APIs]\n        R3[(\"Remote\u003cbr\u003eResource C\")]",
    "C3 --\u003e S3\n        S3 \u003c--\u003e R3\n    end\n```",
    "### Host",
    "The host process acts as the container and coordinator:",
    "- Creates and manages multiple client instances\n- Controls client connection permissions and lifecycle\n- Enforces security policies and consent requirements\n- Handles user authorization decisions\n- Coordinates AI/LLM integration and sampling\n- Manages context aggregation across clients",
    "### Clients",
    "Each client is created by the host and maintains an isolated server connection:",
    "- Establishes one stateful session per server\n- Handles protocol negotiation and capability exchange\n- Routes protocol messages bidirectionally\n- Manages subscriptions and notifications\n- Maintains security boundaries between servers",
    "A host application creates and manages multiple clients, with each client having a 1:1\nrelationship with a particular server.",
    "### Servers",
    "Servers provide specialized context and capabilities:",
    "- Expose resources, tools and prompts via MCP primitives\n- Operate independently with focused responsibilities\n- Request sampling through client interfaces\n- Must respect security constraints\n- Can be local processes or remote services",
    "## Design Principles",
    "MCP is built on several key design principles that inform its architecture and\nimplementation:",
    "1. **Servers should be extremely easy to build**",
    "- Host applications handle complex orchestration responsibilities\n   - Servers focus on specific, well-defined capabilities\n   - Simple interfaces minimize implementation overhead\n   - Clear separation enables maintainable code",
    "2. **Servers should be highly composable**",
    "- Each server provides focused functionality in isolation\n   - Multiple servers can be combined seamlessly\n   - Shared protocol enables interoperability\n   - Modular design supports extensibility",
    "3. **Servers should not be able to read the whole conversation, nor \"see into\" other\n   servers**",
    "- Servers receive only necessary contextual information\n   - Full conversation history stays with the host\n   - Each server connection maintains isolation\n   - Cross-server interactions are controlled by the host\n   - Host process enforces security boundaries",
    "4. **Features can be added to servers and clients progressively**\n   - Core protocol provides minimal required functionality\n   - Additional capabilities can be negotiated as needed\n   - Servers and clients evolve independently\n   - Protocol designed for future extensibility\n   - Backwards compatibility is maintained",
    "## Message Types",
    "MCP defines three core message types based on\n[JSON-RPC 2.0](https://www.jsonrpc.org/specification):",
    "- **Requests**: Bidirectional messages with method and parameters expecting a response\n- **Responses**: Successful results or errors matching specific request IDs\n- **Notifications**: One-way messages requiring no response",
    "Each message type follows the JSON-RPC 2.0 specification for structure and delivery\nsemantics.",
    "## Capability Negotiation",
    "The Model Context Protocol uses a capability-based negotiation system where clients and\nservers explicitly declare their supported features during initialization. Capabilities\ndetermine which protocol features and primitives are available during a session.",
    "- Servers declare capabilities like resource subscriptions, tool support, and prompt\n  templates\n- Clients declare capabilities like sampling support and notification handling\n- Both parties must respect declared capabilities throughout the session\n- Additional capabilities can be negotiated through extensions to the protocol",
    "```mermaid\nsequenceDiagram\n    participant Host\n    participant Client\n    participant Server",
    "Host-\u003e\u003e+Client: Initialize client\n    Client-\u003e\u003e+Server: Initialize session with capabilities\n    Server--\u003e\u003eClient: Respond with supported capabilities",
    "Note over Host,Server: Active Session with Negotiated Features",
    "loop Client Requests\n        Host-\u003e\u003eClient: User- or model-initiated action\n        Client-\u003e\u003eServer: Request (tools/resources)\n        Server--\u003e\u003eClient: Response\n        Client--\u003e\u003eHost: Update UI or respond to model\n    end",
    "loop Server Requests\n        Server-\u003e\u003eClient: Request (sampling)\n        Client-\u003e\u003eHost: Forward to AI\n        Host--\u003e\u003eClient: AI response\n        Client--\u003e\u003eServer: Response\n    end",
    "loop Notifications\n        Server--)Client: Resource updates\n        Client--)Server: Status changes\n    end",
    "Host-\u003e\u003eClient: Terminate\n    Client-\u003e\u003e-Server: End session\n    deactivate Server\n```",
    "Each capability unlocks specific protocol features for use during the session. For\nexample:",
    "- Implemented [server features](/specification/2024-11-05/server) must be\n  advertised in the server's capabilities\n- Emitting resource subscription notifications requires the server to declare\n  subscription support\n- Tool invocation requires the server to declare tool capabilities\n- [Sampling](/specification/2024-11-05/client) requires the client to\n  declare support in its capabilities",
    "This capability negotiation ensures clients and servers have a clear understanding of\nsupported functionality while maintaining protocol extensibility.",
    "---\ntitle: Overview\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "All messages between MCP clients and servers **MUST** follow the\n[JSON-RPC 2.0](https://www.jsonrpc.org/specification) specification. The protocol defines\nthree fundamental types of messages:",
    "| Type            | Description                            | Requirements                           |\n| --------------- | -------------------------------------- | -------------------------------------- |\n| `Requests`      | Messages sent to initiate an operation | Must include unique ID and method name |\n| `Responses`     | Messages sent in reply to requests     | Must include same ID as request        |\n| `Notifications` | One-way messages with no reply         | Must not include an ID                 |",
    "**Responses** are further sub-categorized as either **successful results** or **errors**.\nResults can follow any JSON object structure, while errors must include an error code and\nmessage at minimum.",
    "## Protocol Layers",
    "The Model Context Protocol consists of several key components that work together:",
    "- **Base Protocol**: Core JSON-RPC message types\n- **Lifecycle Management**: Connection initialization, capability negotiation, and\n  session control\n- **Server Features**: Resources, prompts, and tools exposed by servers\n- **Client Features**: Sampling and root directory lists provided by clients\n- **Utilities**: Cross-cutting concerns like logging and argument completion",
    "All implementations **MUST** support the base protocol and lifecycle management\ncomponents. Other components **MAY** be implemented based on the specific needs of the\napplication.",
    "These protocol layers establish clear separation of concerns while enabling rich\ninteractions between clients and servers. The modular design allows implementations to\nsupport exactly the features they need.",
    "See the following pages for more details on the different components:",
    "\u003cCardGroup cols={3}\u003e\n  \u003cCard\n    title=\"Lifecycle\"\n    icon=\"arrows-rotate\"\n    href=\"/specification/2024-11-05/basic/lifecycle\"\n  /\u003e\n  \u003cCard\n    title=\"Resources\"\n    icon=\"file-lines\"\n    href=\"/specification/2024-11-05/server/resources\"\n  /\u003e\n  \u003cCard\n    title=\"Prompts\"\n    icon=\"message\"\n    href=\"/specification/2024-11-05/server/prompts\"\n  /\u003e\n  \u003cCard\n    title=\"Tools\"\n    icon=\"wrench\"\n    href=\"/specification/2024-11-05/server/tools\"\n  /\u003e\n  \u003cCard\n    title=\"Logging\"\n    icon=\"rectangle-list\"\n    href=\"/specification/2024-11-05/server/utilities/logging\"\n  /\u003e\n  \u003cCard\n    title=\"Sampling\"\n    icon=\"code\"\n    href=\"/specification/2024-11-05/client/sampling\"\n  /\u003e\n\u003c/CardGroup\u003e",
    "## Auth",
    "Authentication and authorization are not currently part of the core MCP specification,\nbut we are considering ways to introduce them in future. Join us in\n[GitHub Discussions](https://github.com/modelcontextprotocol/specification/discussions)\nto help shape the future of the protocol!",
    "Clients and servers **MAY** negotiate their own custom authentication and authorization\nstrategies.",
    "## Schema",
    "The full specification of the protocol is defined as a\n[TypeScript schema](http://github.com/modelcontextprotocol/specification/tree/main/schema/2024-11-05/schema.ts).\nThis is the source of truth for all protocol messages and structures.",
    "There is also a\n[JSON Schema](http://github.com/modelcontextprotocol/specification/tree/main/schema/2024-11-05/schema.json),\nwhich is automatically generated from the TypeScript source of truth, for use with\nvarious automated tooling.",
    "---\ntitle: Lifecycle\ntype: docs\nweight: 30\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "The Model Context Protocol (MCP) defines a rigorous lifecycle for client-server\nconnections that ensures proper capability negotiation and state management.",
    "1. **Initialization**: Capability negotiation and protocol version agreement\n2. **Operation**: Normal protocol communication\n3. **Shutdown**: Graceful termination of the connection",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Note over Client,Server: Initialization Phase\n    activate Client\n    Client-\u003e\u003e+Server: initialize request\n    Server--\u003e\u003eClient: initialize response\n    Client--)Server: initialized notification",
    "Note over Client,Server: Operation Phase\n    rect rgb(200, 220, 250)\n        note over Client,Server: Normal protocol operations\n    end",
    "Note over Client,Server: Shutdown\n    Client--)-Server: Disconnect\n    deactivate Server\n    Note over Client,Server: Connection closed\n```",
    "## Lifecycle Phases",
    "### Initialization",
    "The initialization phase **MUST** be the first interaction between client and server.\nDuring this phase, the client and server:",
    "- Establish protocol version compatibility\n- Exchange and negotiate capabilities\n- Share implementation details",
    "The client **MUST** initiate this phase by sending an `initialize` request containing:",
    "- Protocol version supported\n- Client capabilities\n- Client implementation information",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"roots\": {\n        \"listChanged\": true\n      },\n      \"sampling\": {}\n    },\n    \"clientInfo\": {\n      \"name\": \"ExampleClient\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}\n```",
    "The server **MUST** respond with its own capabilities and information:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"logging\": {},\n      \"prompts\": {\n        \"listChanged\": true\n      },\n      \"resources\": {\n        \"subscribe\": true,\n        \"listChanged\": true\n      },\n      \"tools\": {\n        \"listChanged\": true\n      }\n    },\n    \"serverInfo\": {\n      \"name\": \"ExampleServer\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}\n```",
    "After successful initialization, the client **MUST** send an `initialized` notification\nto indicate it is ready to begin normal operations:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/initialized\"\n}\n```",
    "- The client **SHOULD NOT** send requests other than\n  [pings](/specification/2024-11-05/basic/utilities/ping) before the server\n  has responded to the `initialize` request.\n- The server **SHOULD NOT** send requests other than\n  [pings](/specification/2024-11-05/basic/utilities/ping) and\n  [logging](/specification/2024-11-05/server/utilities/logging) before\n  receiving the `initialized` notification.",
    "#### Version Negotiation",
    "In the `initialize` request, the client **MUST** send a protocol version it supports.\nThis **SHOULD** be the _latest_ version supported by the client.",
    "If the server supports the requested protocol version, it **MUST** respond with the same\nversion. Otherwise, the server **MUST** respond with another protocol version it\nsupports. This **SHOULD** be the _latest_ version supported by the server.",
    "If the client does not support the version in the server's response, it **SHOULD**\ndisconnect.",
    "#### Capability Negotiation",
    "Client and server capabilities establish which optional protocol features will be\navailable during the session.",
    "Key capabilities include:",
    "| Category | Capability     | Description                                                                         |\n| -------- | -------------- | ----------------------------------------------------------------------------------- |\n| Client   | `roots`        | Ability to provide filesystem [roots](/specification/2024-11-05/client/roots)       |\n| Client   | `sampling`     | Support for LLM [sampling](/specification/2024-11-05/client/sampling) requests      |\n| Client   | `experimental` | Describes support for non-standard experimental features                            |\n| Server   | `prompts`      | Offers [prompt templates](/specification/2024-11-05/server/prompts)                 |\n| Server   | `resources`    | Provides readable [resources](/specification/2024-11-05/server/resources)           |\n| Server   | `tools`        | Exposes callable [tools](/specification/2024-11-05/server/tools)                    |\n| Server   | `logging`      | Emits structured [log messages](/specification/2024-11-05/server/utilities/logging) |\n| Server   | `experimental` | Describes support for non-standard experimental features                            |",
    "Capability objects can describe sub-capabilities like:",
    "- `listChanged`: Support for list change notifications (for prompts, resources, and\n  tools)\n- `subscribe`: Support for subscribing to individual items' changes (resources only)",
    "### Operation",
    "During the operation phase, the client and server exchange messages according to the\nnegotiated capabilities.",
    "Both parties **SHOULD**:",
    "- Respect the negotiated protocol version\n- Only use capabilities that were successfully negotiated",
    "### Shutdown",
    "During the shutdown phase, one side (usually the client) cleanly terminates the protocol\nconnection. No specific shutdown messages are defined—instead, the underlying transport\nmechanism should be used to signal connection termination:",
    "#### stdio",
    "For the stdio [transport](/specification/2024-11-05/basic/transports), the\nclient **SHOULD** initiate shutdown by:",
    "1. First, closing the input stream to the child process (the server)\n2. Waiting for the server to exit, or sending `SIGTERM` if the server does not exit\n   within a reasonable time\n3. Sending `SIGKILL` if the server does not exit within a reasonable time after `SIGTERM`",
    "The server **MAY** initiate shutdown by closing its output stream to the client and\nexiting.",
    "#### HTTP",
    "For HTTP [transports](/specification/2024-11-05/basic/transports), shutdown\nis indicated by closing the associated HTTP connection(s).",
    "## Error Handling",
    "Implementations **SHOULD** be prepared to handle these error cases:",
    "- Protocol version mismatch\n- Failure to negotiate required capabilities\n- Initialize request timeout\n- Shutdown timeout",
    "Implementations **SHOULD** implement appropriate timeouts for all requests, to prevent\nhung connections and resource exhaustion.",
    "Example initialization error:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"Unsupported protocol version\",\n    \"data\": {\n      \"supported\": [\"2024-11-05\"],\n      \"requested\": \"1.0.0\"\n    }\n  }\n}\n```",
    "---\ntitle: Messages\ntype: docs\nweight: 20\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "All messages in MCP **MUST** follow the\n[JSON-RPC 2.0](https://www.jsonrpc.org/specification) specification. The protocol defines\nthree types of messages:",
    "## Requests",
    "Requests are sent from the client to the server or vice versa.",
    "```typescript\n{\n  jsonrpc: \"2.0\";\n  id: string | number;\n  method: string;\n  params?: {\n    [key: string]: unknown;\n  };\n}\n```",
    "- Requests **MUST** include a string or integer ID.\n- Unlike base JSON-RPC, the ID **MUST NOT** be `null`.\n- The request ID **MUST NOT** have been previously used by the requestor within the same\n  session.",
    "## Responses",
    "Responses are sent in reply to requests.",
    "```typescript\n{\n  jsonrpc: \"2.0\";\n  id: string | number;\n  result?: {\n    [key: string]: unknown;\n  }\n  error?: {\n    code: number;\n    message: string;\n    data?: unknown;\n  }\n}\n```",
    "- Responses **MUST** include the same ID as the request they correspond to.\n- Either a `result` or an `error` **MUST** be set. A response **MUST NOT** set both.\n- Error codes **MUST** be integers.",
    "## Notifications",
    "Notifications are sent from the client to the server or vice versa. They do not expect a\nresponse.",
    "```typescript\n{\n  jsonrpc: \"2.0\";\n  method: string;\n  params?: {\n    [key: string]: unknown;\n  };\n}\n```",
    "- Notifications **MUST NOT** include an ID.",
    "---\ntitle: Transports\ntype: docs\nweight: 40\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "MCP currently defines two standard transport mechanisms for client-server communication:",
    "1. [stdio](#stdio), communication over standard in and standard out\n2. [HTTP with Server-Sent Events](#http-with-sse) (SSE)",
    "Clients **SHOULD** support stdio whenever possible.",
    "It is also possible for clients and servers to implement\n[custom transports](#custom-transports) in a pluggable fashion.",
    "## stdio",
    "In the **stdio** transport:",
    "- The client launches the MCP server as a subprocess.\n- The server receives JSON-RPC messages on its standard input (`stdin`) and writes\n  responses to its standard output (`stdout`).\n- Messages are delimited by newlines, and **MUST NOT** contain embedded newlines.\n- The server **MAY** write UTF-8 strings to its standard error (`stderr`) for logging\n  purposes. Clients **MAY** capture, forward, or ignore this logging.\n- The server **MUST NOT** write anything to its `stdout` that is not a valid MCP message.\n- The client **MUST NOT** write anything to the server's `stdin` that is not a valid MCP\n  message.",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server Process",
    "Client-\u003e\u003e+Server Process: Launch subprocess\n    loop Message Exchange\n        Client-\u003e\u003eServer Process: Write to stdin\n        Server Process-\u003e\u003eClient: Write to stdout\n        Server Process--)Client: Optional logs on stderr\n    end\n    Client-\u003e\u003eServer Process: Close stdin, terminate subprocess\n    deactivate Server Process\n```",
    "## HTTP with SSE",
    "In the **SSE** transport, the server operates as an independent process that can handle\nmultiple client connections.",
    "#### Security Warning",
    "When implementing HTTP with SSE transport:",
    "1. Servers **MUST** validate the `Origin` header on all incoming connections to prevent DNS rebinding attacks\n2. When running locally, servers **SHOULD** bind only to localhost (127.0.0.1) rather than all network interfaces (0.0.0.0)\n3. Servers **SHOULD** implement proper authentication for all connections",
    "Without these protections, attackers could use DNS rebinding to interact with local MCP servers from remote websites.",
    "The server **MUST** provide two endpoints:",
    "1. An SSE endpoint, for clients to establish a connection and receive messages from the\n   server\n2. A regular HTTP POST endpoint for clients to send messages to the server",
    "When a client connects, the server **MUST** send an `endpoint` event containing a URI for\nthe client to use for sending messages. All subsequent client messages **MUST** be sent\nas HTTP POST requests to this endpoint.",
    "Server messages are sent as SSE `message` events, with the message content encoded as\nJSON in the event data.",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Client-\u003e\u003eServer: Open SSE connection\n    Server-\u003e\u003eClient: endpoint event\n    loop Message Exchange\n        Client-\u003e\u003eServer: HTTP POST messages\n        Server-\u003e\u003eClient: SSE message events\n    end\n    Client-\u003e\u003eServer: Close SSE connection\n```",
    "## Custom Transports",
    "Clients and servers **MAY** implement additional custom transport mechanisms to suit\ntheir specific needs. The protocol is transport-agnostic and can be implemented over any\ncommunication channel that supports bidirectional message exchange.",
    "Implementers who choose to support custom transports **MUST** ensure they preserve the\nJSON-RPC message format and lifecycle requirements defined by MCP. Custom transports\n**SHOULD** document their specific connection establishment and message exchange patterns\nto aid interoperability.",
    "---\ntitle: Cancellation\nweight: 10\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "The Model Context Protocol (MCP) supports optional cancellation of in-progress requests\nthrough notification messages. Either side can send a cancellation notification to\nindicate that a previously-issued request should be terminated.",
    "## Cancellation Flow",
    "When a party wants to cancel an in-progress request, it sends a `notifications/cancelled`\nnotification containing:",
    "- The ID of the request to cancel\n- An optional reason string that can be logged or displayed",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/cancelled\",\n  \"params\": {\n    \"requestId\": \"123\",\n    \"reason\": \"User requested cancellation\"\n  }\n}\n```",
    "## Behavior Requirements",
    "1. Cancellation notifications **MUST** only reference requests that:\n   - Were previously issued in the same direction\n   - Are believed to still be in-progress\n2. The `initialize` request **MUST NOT** be cancelled by clients\n3. Receivers of cancellation notifications **SHOULD**:\n   - Stop processing the cancelled request\n   - Free associated resources\n   - Not send a response for the cancelled request\n4. Receivers **MAY** ignore cancellation notifications if:\n   - The referenced request is unknown\n   - Processing has already completed\n   - The request cannot be cancelled\n5. The sender of the cancellation notification **SHOULD** ignore any response to the\n   request that arrives afterward",
    "## Timing Considerations",
    "Due to network latency, cancellation notifications may arrive after request processing\nhas completed, and potentially after a response has already been sent.",
    "Both parties **MUST** handle these race conditions gracefully:",
    "```mermaid\nsequenceDiagram\n   participant Client\n   participant Server",
    "Client-\u003e\u003eServer: Request (ID: 123)\n   Note over Server: Processing starts\n   Client--)Server: notifications/cancelled (ID: 123)\n   alt\n      Note over Server: Processing may have\u003cbr/\u003ecompleted before\u003cbr/\u003ecancellation arrives\n   else If not completed\n      Note over Server: Stop processing\n   end\n```",
    "## Implementation Notes",
    "- Both parties **SHOULD** log cancellation reasons for debugging\n- Application UIs **SHOULD** indicate when cancellation is requested",
    "## Error Handling",
    "Invalid cancellation notifications **SHOULD** be ignored:",
    "- Unknown request IDs\n- Already completed requests\n- Malformed notifications",
    "This maintains the \"fire and forget\" nature of notifications while allowing for race\nconditions in asynchronous communication.",
    "---\ntitle: Ping\nweight: 5\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "The Model Context Protocol includes an optional ping mechanism that allows either party\nto verify that their counterpart is still responsive and the connection is alive.",
    "## Overview",
    "The ping functionality is implemented through a simple request/response pattern. Either\nthe client or server can initiate a ping by sending a `ping` request.",
    "## Message Format",
    "A ping request is a standard JSON-RPC request with no parameters:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"method\": \"ping\"\n}\n```",
    "## Behavior Requirements",
    "1. The receiver **MUST** respond promptly with an empty response:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"result\": {}\n}\n```",
    "2. If no response is received within a reasonable timeout period, the sender **MAY**:\n   - Consider the connection stale\n   - Terminate the connection\n   - Attempt reconnection procedures",
    "## Usage Patterns",
    "```mermaid\nsequenceDiagram\n    participant Sender\n    participant Receiver",
    "Sender-\u003e\u003eReceiver: ping request\n    Receiver-\u003e\u003eSender: empty response\n```",
    "## Implementation Considerations",
    "- Implementations **SHOULD** periodically issue pings to detect connection health\n- The frequency of pings **SHOULD** be configurable\n- Timeouts **SHOULD** be appropriate for the network environment\n- Excessive pinging **SHOULD** be avoided to reduce network overhead",
    "## Error Handling",
    "- Timeouts **SHOULD** be treated as connection failures\n- Multiple failed pings **MAY** trigger connection reset\n- Implementations **SHOULD** log ping failures for diagnostics",
    "---\ntitle: Progress\nweight: 30\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "The Model Context Protocol (MCP) supports optional progress tracking for long-running\noperations through notification messages. Either side can send progress notifications to\nprovide updates about operation status.",
    "## Progress Flow",
    "When a party wants to _receive_ progress updates for a request, it includes a\n`progressToken` in the request metadata.",
    "- Progress tokens **MUST** be a string or integer value\n- Progress tokens can be chosen by the sender using any means, but **MUST** be unique\n  across all active requests.",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"some_method\",\n  \"params\": {\n    \"_meta\": {\n      \"progressToken\": \"abc123\"\n    }\n  }\n}\n```",
    "The receiver **MAY** then send progress notifications containing:",
    "- The original progress token\n- The current progress value so far\n- An optional \"total\" value",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/progress\",\n  \"params\": {\n    \"progressToken\": \"abc123\",\n    \"progress\": 50,\n    \"total\": 100\n  }\n}\n```",
    "- The `progress` value **MUST** increase with each notification, even if the total is\n  unknown.\n- The `progress` and the `total` values **MAY** be floating point.",
    "## Behavior Requirements",
    "1. Progress notifications **MUST** only reference tokens that:",
    "- Were provided in an active request\n   - Are associated with an in-progress operation",
    "2. Receivers of progress requests **MAY**:\n   - Choose not to send any progress notifications\n   - Send notifications at whatever frequency they deem appropriate\n   - Omit the total value if unknown",
    "```mermaid\nsequenceDiagram\n    participant Sender\n    participant Receiver",
    "Note over Sender,Receiver: Request with progress token\n    Sender-\u003e\u003eReceiver: Method request with progressToken",
    "Note over Sender,Receiver: Progress updates\n    loop Progress Updates\n        Receiver--\u003e\u003eSender: Progress notification (0.2/1.0)\n        Receiver--\u003e\u003eSender: Progress notification (0.6/1.0)\n        Receiver--\u003e\u003eSender: Progress notification (1.0/1.0)\n    end",
    "Note over Sender,Receiver: Operation complete\n    Receiver-\u003e\u003eSender: Method response\n```",
    "## Implementation Notes",
    "- Senders and receivers **SHOULD** track active progress tokens\n- Both parties **SHOULD** implement rate limiting to prevent flooding\n- Progress notifications **MUST** stop after completion",
    "---\ntitle: Roots\ntype: docs\nweight: 40\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for clients to expose\nfilesystem \"roots\" to servers. Roots define the boundaries of where servers can operate\nwithin the filesystem, allowing them to understand which directories and files they have\naccess to. Servers can request the list of roots from supporting clients and receive\nnotifications when that list changes.",
    "## User Interaction Model",
    "Roots in MCP are typically exposed through workspace or project configuration interfaces.",
    "For example, implementations could offer a workspace/project picker that allows users to\nselect directories and files the server should have access to. This can be combined with\nautomatic workspace detection from version control systems or project files.",
    "However, implementations are free to expose roots through any interface pattern that\nsuits their needs\u0026mdash;the protocol itself does not mandate any specific user\ninteraction model.",
    "## Capabilities",
    "Clients that support roots **MUST** declare the `roots` capability during\n[initialization](/specification/2024-11-05/basic/lifecycle#initialization):",
    "```json\n{\n  \"capabilities\": {\n    \"roots\": {\n      \"listChanged\": true\n    }\n  }\n}\n```",
    "`listChanged` indicates whether the client will emit notifications when the list of roots\nchanges.",
    "## Protocol Messages",
    "### Listing Roots",
    "To retrieve roots, servers send a `roots/list` request:",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"roots/list\"\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"roots\": [\n      {\n        \"uri\": \"file:///home/user/projects/myproject\",\n        \"name\": \"My Project\"\n      }\n    ]\n  }\n}\n```",
    "### Root List Changes",
    "When roots change, clients that support `listChanged` **MUST** send a notification:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/roots/list_changed\"\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant Server\n    participant Client",
    "Note over Server,Client: Discovery\n    Server-\u003e\u003eClient: roots/list\n    Client--\u003e\u003eServer: Available roots",
    "Note over Server,Client: Changes\n    Client--)Server: notifications/roots/list_changed\n    Server-\u003e\u003eClient: roots/list\n    Client--\u003e\u003eServer: Updated roots\n```",
    "## Data Types",
    "### Root",
    "A root definition includes:",
    "- `uri`: Unique identifier for the root. This **MUST** be a `file://` URI in the current\n  specification.\n- `name`: Optional human-readable name for display purposes.",
    "Example roots for different use cases:",
    "#### Project Directory",
    "```json\n{\n  \"uri\": \"file:///home/user/projects/myproject\",\n  \"name\": \"My Project\"\n}\n```",
    "#### Multiple Repositories",
    "```json\n[\n  {\n    \"uri\": \"file:///home/user/repos/frontend\",\n    \"name\": \"Frontend Repository\"\n  },\n  {\n    \"uri\": \"file:///home/user/repos/backend\",\n    \"name\": \"Backend Repository\"\n  }\n]\n```",
    "## Error Handling",
    "Clients **SHOULD** return standard JSON-RPC errors for common failure cases:",
    "- Client does not support roots: `-32601` (Method not found)\n- Internal errors: `-32603`",
    "Example error:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -32601,\n    \"message\": \"Roots not supported\",\n    \"data\": {\n      \"reason\": \"Client does not have roots capability\"\n    }\n  }\n}\n```",
    "## Security Considerations",
    "1. Clients **MUST**:",
    "- Only expose roots with appropriate permissions\n   - Validate all root URIs to prevent path traversal\n   - Implement proper access controls\n   - Monitor root accessibility",
    "2. Servers **SHOULD**:\n   - Handle cases where roots become unavailable\n   - Respect root boundaries during operations\n   - Validate all paths against provided roots",
    "## Implementation Guidelines",
    "1. Clients **SHOULD**:",
    "- Prompt users for consent before exposing roots to servers\n   - Provide clear user interfaces for root management\n   - Validate root accessibility before exposing\n   - Monitor for root changes",
    "2. Servers **SHOULD**:\n   - Check for roots capability before usage\n   - Handle root list changes gracefully\n   - Respect root boundaries in operations\n   - Cache root information appropriately",
    "---\ntitle: Sampling\ntype: docs\nweight: 40\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for servers to request LLM\nsampling (\"completions\" or \"generations\") from language models via clients. This flow\nallows clients to maintain control over model access, selection, and permissions while\nenabling servers to leverage AI capabilities\u0026mdash;with no server API keys necessary.\nServers can request text or image-based interactions and optionally include context from\nMCP servers in their prompts.",
    "## User Interaction Model",
    "Sampling in MCP allows servers to implement agentic behaviors, by enabling LLM calls to\noccur _nested_ inside other MCP server features.",
    "Implementations are free to expose sampling through any interface pattern that suits\ntheir needs\u0026mdash;the protocol itself does not mandate any specific user interaction\nmodel.",
    "\u003cWarning\u003e",
    "For trust \u0026 safety and security, there **SHOULD** always\nbe a human in the loop with the ability to deny sampling requests.",
    "Applications **SHOULD**:",
    "- Provide UI that makes it easy and intuitive to review sampling requests\n- Allow users to view and edit prompts before sending\n- Present generated responses for review before delivery",
    "\u003c/Warning\u003e",
    "## Capabilities",
    "Clients that support sampling **MUST** declare the `sampling` capability during\n[initialization](/specification/2024-11-05/basic/lifecycle#initialization):",
    "```json\n{\n  \"capabilities\": {\n    \"sampling\": {}\n  }\n}\n```",
    "## Protocol Messages",
    "### Creating Messages",
    "To request a language model generation, servers send a `sampling/createMessage` request:",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"sampling/createMessage\",\n  \"params\": {\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"What is the capital of France?\"\n        }\n      }\n    ],\n    \"modelPreferences\": {\n      \"hints\": [\n        {\n          \"name\": \"claude-3-sonnet\"\n        }\n      ],\n      \"intelligencePriority\": 0.8,\n      \"speedPriority\": 0.5\n    },\n    \"systemPrompt\": \"You are a helpful assistant.\",\n    \"maxTokens\": 100\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"role\": \"assistant\",\n    \"content\": {\n      \"type\": \"text\",\n      \"text\": \"The capital of France is Paris.\"\n    },\n    \"model\": \"claude-3-sonnet-20240307\",\n    \"stopReason\": \"endTurn\"\n  }\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant Server\n    participant Client\n    participant User\n    participant LLM",
    "Note over Server,Client: Server initiates sampling\n    Server-\u003e\u003eClient: sampling/createMessage",
    "Note over Client,User: Human-in-the-loop review\n    Client-\u003e\u003eUser: Present request for approval\n    User--\u003e\u003eClient: Review and approve/modify",
    "Note over Client,LLM: Model interaction\n    Client-\u003e\u003eLLM: Forward approved request\n    LLM--\u003e\u003eClient: Return generation",
    "Note over Client,User: Response review\n    Client-\u003e\u003eUser: Present response for approval\n    User--\u003e\u003eClient: Review and approve/modify",
    "Note over Server,Client: Complete request\n    Client--\u003e\u003eServer: Return approved response\n```",
    "## Data Types",
    "### Messages",
    "Sampling messages can contain:",
    "#### Text Content",
    "```json\n{\n  \"type\": \"text\",\n  \"text\": \"The message content\"\n}\n```",
    "#### Image Content",
    "```json\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-image-data\",\n  \"mimeType\": \"image/jpeg\"\n}\n```",
    "### Model Preferences",
    "Model selection in MCP requires careful abstraction since servers and clients may use\ndifferent AI providers with distinct model offerings. A server cannot simply request a\nspecific model by name since the client may not have access to that exact model or may\nprefer to use a different provider's equivalent model.",
    "To solve this, MCP implements a preference system that combines abstract capability\npriorities with optional model hints:",
    "#### Capability Priorities",
    "Servers express their needs through three normalized priority values (0-1):",
    "- `costPriority`: How important is minimizing costs? Higher values prefer cheaper models.\n- `speedPriority`: How important is low latency? Higher values prefer faster models.\n- `intelligencePriority`: How important are advanced capabilities? Higher values prefer\n  more capable models.",
    "#### Model Hints",
    "While priorities help select models based on characteristics, `hints` allow servers to\nsuggest specific models or model families:",
    "- Hints are treated as substrings that can match model names flexibly\n- Multiple hints are evaluated in order of preference\n- Clients **MAY** map hints to equivalent models from different providers\n- Hints are advisory\u0026mdash;clients make final model selection",
    "For example:",
    "```json\n{\n  \"hints\": [\n    { \"name\": \"claude-3-sonnet\" }, // Prefer Sonnet-class models\n    { \"name\": \"claude\" } // Fall back to any Claude model\n  ],\n  \"costPriority\": 0.3, // Cost is less important\n  \"speedPriority\": 0.8, // Speed is very important\n  \"intelligencePriority\": 0.5 // Moderate capability needs\n}\n```",
    "The client processes these preferences to select an appropriate model from its available\noptions. For instance, if the client doesn't have access to Claude models but has Gemini,\nit might map the sonnet hint to `gemini-1.5-pro` based on similar capabilities.",
    "## Error Handling",
    "Clients **SHOULD** return errors for common failure cases:",
    "Example error:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -1,\n    \"message\": \"User rejected sampling request\"\n  }\n}\n```",
    "## Security Considerations",
    "1. Clients **SHOULD** implement user approval controls\n2. Both parties **SHOULD** validate message content\n3. Clients **SHOULD** respect model preference hints\n4. Clients **SHOULD** implement rate limiting\n5. Both parties **MUST** handle sensitive data appropriately",
    "---\ntitle: Specification\n---",
    "[Model Context Protocol](https://modelcontextprotocol.io) (MCP) is an open protocol that\nenables seamless integration between LLM applications and external data sources and\ntools. Whether you're building an AI-powered IDE, enhancing a chat interface, or creating\ncustom AI workflows, MCP provides a standardized way to connect LLMs with the context\nthey need.",
    "This specification defines the authoritative protocol requirements, based on the\nTypeScript schema in\n[schema.ts](https://github.com/modelcontextprotocol/specification/blob/main/schema/2024-11-05/schema.ts).",
    "For implementation guides and examples, visit\n[modelcontextprotocol.io](https://modelcontextprotocol.io).",
    "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD\nNOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be\ninterpreted as described in [BCP 14](https://datatracker.ietf.org/doc/html/bcp14)\n[[RFC2119](https://datatracker.ietf.org/doc/html/rfc2119)]\n[[RFC8174](https://datatracker.ietf.org/doc/html/rfc8174)] when, and only when, they\nappear in all capitals, as shown here.",
    "## Overview",
    "MCP provides a standardized way for applications to:",
    "- Share contextual information with language models\n- Expose tools and capabilities to AI systems\n- Build composable integrations and workflows",
    "The protocol uses [JSON-RPC](https://www.jsonrpc.org/) 2.0 messages to establish\ncommunication between:",
    "- **Hosts**: LLM applications that initiate connections\n- **Clients**: Connectors within the host application\n- **Servers**: Services that provide context and capabilities",
    "MCP takes some inspiration from the\n[Language Server Protocol](https://microsoft.github.io/language-server-protocol/), which\nstandardizes how to add support for programming languages across a whole ecosystem of\ndevelopment tools. In a similar way, MCP standardizes how to integrate additional context\nand tools into the ecosystem of AI applications.",
    "## Key Details",
    "### Base Protocol",
    "- [JSON-RPC](https://www.jsonrpc.org/) message format\n- Stateful connections\n- Server and client capability negotiation",
    "### Features",
    "Servers offer any of the following features to clients:",
    "- **Resources**: Context and data, for the user or the AI model to use\n- **Prompts**: Templated messages and workflows for users\n- **Tools**: Functions for the AI model to execute",
    "Clients may offer the following feature to servers:",
    "- **Sampling**: Server-initiated agentic behaviors and recursive LLM interactions",
    "### Additional Utilities",
    "- Configuration\n- Progress tracking\n- Cancellation\n- Error reporting\n- Logging",
    "## Security and Trust \u0026 Safety",
    "The Model Context Protocol enables powerful capabilities through arbitrary data access\nand code execution paths. With this power comes important security and trust\nconsiderations that all implementors must carefully address.",
    "### Key Principles",
    "1. **User Consent and Control**",
    "- Users must explicitly consent to and understand all data access and operations\n   - Users must retain control over what data is shared and what actions are taken\n   - Implementors should provide clear UIs for reviewing and authorizing activities",
    "2. **Data Privacy**",
    "- Hosts must obtain explicit user consent before exposing user data to servers\n   - Hosts must not transmit resource data elsewhere without user consent\n   - User data should be protected with appropriate access controls",
    "3. **Tool Safety**",
    "- Tools represent arbitrary code execution and must be treated with appropriate\n     caution\n   - Hosts must obtain explicit user consent before invoking any tool\n   - Users should understand what each tool does before authorizing its use",
    "4. **LLM Sampling Controls**\n   - Users must explicitly approve any LLM sampling requests\n   - Users should control:\n     - Whether sampling occurs at all\n     - The actual prompt that will be sent\n     - What results the server can see\n   - The protocol intentionally limits server visibility into prompts",
    "### Implementation Guidelines",
    "While MCP itself cannot enforce these security principles at the protocol level,\nimplementors **SHOULD**:",
    "1. Build robust consent and authorization flows into their applications\n2. Provide clear documentation of security implications\n3. Implement appropriate access controls and data protections\n4. Follow security best practices in their integrations\n5. Consider privacy implications in their feature designs",
    "## Learn More",
    "Explore the detailed specification for each protocol component:",
    "\u003cCardGroup cols={5}\u003e\n  \u003cCard\n    title=\"Architecture\"\n    icon=\"sitemap\"\n    href=\"/specification/2024-11-05/architecture\"\n  /\u003e\n  \u003cCard\n    title=\"Base Protocol\"\n    icon=\"code\"\n    href=\"/specification/2024-11-05/basic\"\n  /\u003e\n  \u003cCard\n    title=\"Server Features\"\n    icon=\"server\"\n    href=\"/specification/2024-11-05/server\"\n  /\u003e\n  \u003cCard\n    title=\"Client Features\"\n    icon=\"user\"\n    href=\"/specification/2024-11-05/client\"\n  /\u003e\n  \u003cCard title=\"Contributing\" icon=\"pencil\" href=\"/development/contributing\" /\u003e\n\u003c/CardGroup\u003e",
    "---\ntitle: Overview\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "Servers provide the fundamental building blocks for adding context to language models via\nMCP. These primitives enable rich interactions between clients, servers, and language\nmodels:",
    "- **Prompts**: Pre-defined templates or instructions that guide language model\n  interactions\n- **Resources**: Structured data or content that provides additional context to the model\n- **Tools**: Executable functions that allow models to perform actions or retrieve\n  information",
    "Each primitive can be summarized in the following control hierarchy:",
    "| Primitive | Control                | Description                                        | Example                         |\n| --------- | ---------------------- | -------------------------------------------------- | ------------------------------- |\n| Prompts   | User-controlled        | Interactive templates invoked by user choice       | Slash commands, menu options    |\n| Resources | Application-controlled | Contextual data attached and managed by the client | File contents, git history      |\n| Tools     | Model-controlled       | Functions exposed to the LLM to take actions       | API POST requests, file writing |",
    "Explore these key primitives in more detail below:",
    "\u003cCardGroup cols={3}\u003e\n  \u003cCard\n    title=\"Prompts\"\n    icon=\"message\"\n    href=\"/specification/2024-11-05/server/prompts\"\n  /\u003e\n  \u003cCard\n    title=\"Resources\"\n    icon=\"file-lines\"\n    href=\"/specification/2024-11-05/server/resources\"\n  /\u003e\n  \u003cCard\n    title=\"Tools\"\n    icon=\"wrench\"\n    href=\"/specification/2024-11-05/server/tools\"\n  /\u003e\n\u003c/CardGroup\u003e",
    "---\ntitle: Prompts\nweight: 10\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for servers to expose prompt\ntemplates to clients. Prompts allow servers to provide structured messages and\ninstructions for interacting with language models. Clients can discover available\nprompts, retrieve their contents, and provide arguments to customize them.",
    "## User Interaction Model",
    "Prompts are designed to be **user-controlled**, meaning they are exposed from servers to\nclients with the intention of the user being able to explicitly select them for use.",
    "Typically, prompts would be triggered through user-initiated commands in the user\ninterface, which allows users to naturally discover and invoke available prompts.",
    "For example, as slash commands:",
    "![Example of prompt exposed as slash command](/specification/2024-11-05/server/slash-command.png)",
    "However, implementors are free to expose prompts through any interface pattern that suits\ntheir needs\u0026mdash;the protocol itself does not mandate any specific user interaction\nmodel.",
    "## Capabilities",
    "Servers that support prompts **MUST** declare the `prompts` capability during\n[initialization](/specification/2024-11-05/basic/lifecycle#initialization):",
    "```json\n{\n  \"capabilities\": {\n    \"prompts\": {\n      \"listChanged\": true\n    }\n  }\n}\n```",
    "`listChanged` indicates whether the server will emit notifications when the list of\navailable prompts changes.",
    "## Protocol Messages",
    "### Listing Prompts",
    "To retrieve available prompts, clients send a `prompts/list` request. This operation\nsupports\n[pagination](/specification/2024-11-05/server/utilities/pagination).",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"prompts/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"prompts\": [\n      {\n        \"name\": \"code_review\",\n        \"description\": \"Asks the LLM to analyze code quality and suggest improvements\",\n        \"arguments\": [\n          {\n            \"name\": \"code\",\n            \"description\": \"The code to review\",\n            \"required\": true\n          }\n        ]\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```",
    "### Getting a Prompt",
    "To retrieve a specific prompt, clients send a `prompts/get` request. Arguments may be\nauto-completed through [the completion API](/specification/2024-11-05/server/utilities/completion).",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"prompts/get\",\n  \"params\": {\n    \"name\": \"code_review\",\n    \"arguments\": {\n      \"code\": \"def hello():\\n    print('world')\"\n    }\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"description\": \"Code review prompt\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"Please review this Python code:\\ndef hello():\\n    print('world')\"\n        }\n      }\n    ]\n  }\n}\n```",
    "### List Changed Notification",
    "When the list of available prompts changes, servers that declared the `listChanged`\ncapability **SHOULD** send a notification:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/prompts/list_changed\"\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Note over Client,Server: Discovery\n    Client-\u003e\u003eServer: prompts/list\n    Server--\u003e\u003eClient: List of prompts",
    "Note over Client,Server: Usage\n    Client-\u003e\u003eServer: prompts/get\n    Server--\u003e\u003eClient: Prompt content",
    "opt listChanged\n      Note over Client,Server: Changes\n      Server--)Client: prompts/list_changed\n      Client-\u003e\u003eServer: prompts/list\n      Server--\u003e\u003eClient: Updated prompts\n    end\n```",
    "## Data Types",
    "### Prompt",
    "A prompt definition includes:",
    "- `name`: Unique identifier for the prompt\n- `description`: Optional human-readable description\n- `arguments`: Optional list of arguments for customization",
    "### PromptMessage",
    "Messages in a prompt can contain:",
    "- `role`: Either \"user\" or \"assistant\" to indicate the speaker\n- `content`: One of the following content types:",
    "#### Text Content",
    "Text content represents plain text messages:",
    "```json\n{\n  \"type\": \"text\",\n  \"text\": \"The text content of the message\"\n}\n```",
    "This is the most common content type used for natural language interactions.",
    "#### Image Content",
    "Image content allows including visual information in messages:",
    "```json\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-image-data\",\n  \"mimeType\": \"image/png\"\n}\n```",
    "The image data **MUST** be base64-encoded and include a valid MIME type. This enables\nmulti-modal interactions where visual context is important.",
    "#### Embedded Resources",
    "Embedded resources allow referencing server-side resources directly in messages:",
    "```json\n{\n  \"type\": \"resource\",\n  \"resource\": {\n    \"uri\": \"resource://example\",\n    \"mimeType\": \"text/plain\",\n    \"text\": \"Resource content\"\n  }\n}\n```",
    "Resources can contain either text or binary (blob) data and **MUST** include:",
    "- A valid resource URI\n- The appropriate MIME type\n- Either text content or base64-encoded blob data",
    "Embedded resources enable prompts to seamlessly incorporate server-managed content like\ndocumentation, code samples, or other reference materials directly into the conversation\nflow.",
    "## Error Handling",
    "Servers **SHOULD** return standard JSON-RPC errors for common failure cases:",
    "- Invalid prompt name: `-32602` (Invalid params)\n- Missing required arguments: `-32602` (Invalid params)\n- Internal errors: `-32603` (Internal error)",
    "## Implementation Considerations",
    "1. Servers **SHOULD** validate prompt arguments before processing\n2. Clients **SHOULD** handle pagination for large prompt lists\n3. Both parties **SHOULD** respect capability negotiation",
    "## Security",
    "Implementations **MUST** carefully validate all prompt inputs and outputs to prevent\ninjection attacks or unauthorized access to resources.",
    "---\ntitle: Resources\ntype: docs\nweight: 20\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for servers to expose\nresources to clients. Resources allow servers to share data that provides context to\nlanguage models, such as files, database schemas, or application-specific information.\nEach resource is uniquely identified by a\n[URI](https://datatracker.ietf.org/doc/html/rfc3986).",
    "## User Interaction Model",
    "Resources in MCP are designed to be **application-driven**, with host applications\ndetermining how to incorporate context based on their needs.",
    "For example, applications could:",
    "- Expose resources through UI elements for explicit selection, in a tree or list view\n- Allow the user to search through and filter available resources\n- Implement automatic context inclusion, based on heuristics or the AI model's selection",
    "![Example of resource context picker](/specification/2024-11-05/server/resource-picker.png)",
    "However, implementations are free to expose resources through any interface pattern that\nsuits their needs\u0026mdash;the protocol itself does not mandate any specific user\ninteraction model.",
    "## Capabilities",
    "Servers that support resources **MUST** declare the `resources` capability:",
    "```json\n{\n  \"capabilities\": {\n    \"resources\": {\n      \"subscribe\": true,\n      \"listChanged\": true\n    }\n  }\n}\n```",
    "The capability supports two optional features:",
    "- `subscribe`: whether the client can subscribe to be notified of changes to individual\n  resources.\n- `listChanged`: whether the server will emit notifications when the list of available\n  resources changes.",
    "Both `subscribe` and `listChanged` are optional\u0026mdash;servers can support neither,\neither, or both:",
    "```json\n{\n  \"capabilities\": {\n    \"resources\": {} // Neither feature supported\n  }\n}\n```",
    "```json\n{\n  \"capabilities\": {\n    \"resources\": {\n      \"subscribe\": true // Only subscriptions supported\n    }\n  }\n}\n```",
    "```json\n{\n  \"capabilities\": {\n    \"resources\": {\n      \"listChanged\": true // Only list change notifications supported\n    }\n  }\n}\n```",
    "## Protocol Messages",
    "### Listing Resources",
    "To discover available resources, clients send a `resources/list` request. This operation\nsupports\n[pagination](/specification/2024-11-05/server/utilities/pagination).",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"resources/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"resources\": [\n      {\n        \"uri\": \"file:///project/src/main.rs\",\n        \"name\": \"main.rs\",\n        \"description\": \"Primary application entry point\",\n        \"mimeType\": \"text/x-rust\"\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```",
    "### Reading Resources",
    "To retrieve resource contents, clients send a `resources/read` request:",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"resources/read\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\"\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"contents\": [\n      {\n        \"uri\": \"file:///project/src/main.rs\",\n        \"mimeType\": \"text/x-rust\",\n        \"text\": \"fn main() {\\n    println!(\\\"Hello world!\\\");\\n}\"\n      }\n    ]\n  }\n}\n```",
    "### Resource Templates",
    "Resource templates allow servers to expose parameterized resources using\n[URI templates](https://datatracker.ietf.org/doc/html/rfc6570). Arguments may be\nauto-completed through [the completion API](/specification/2024-11-05/server/utilities/completion).",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"resources/templates/list\"\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"resourceTemplates\": [\n      {\n        \"uriTemplate\": \"file:///{path}\",\n        \"name\": \"Project Files\",\n        \"description\": \"Access files in the project directory\",\n        \"mimeType\": \"application/octet-stream\"\n      }\n    ]\n  }\n}\n```",
    "### List Changed Notification",
    "When the list of available resources changes, servers that declared the `listChanged`\ncapability **SHOULD** send a notification:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/resources/list_changed\"\n}\n```",
    "### Subscriptions",
    "The protocol supports optional subscriptions to resource changes. Clients can subscribe\nto specific resources and receive notifications when they change:",
    "**Subscribe Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"method\": \"resources/subscribe\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\"\n  }\n}\n```",
    "**Update Notification:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/resources/updated\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\"\n  }\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Note over Client,Server: Resource Discovery\n    Client-\u003e\u003eServer: resources/list\n    Server--\u003e\u003eClient: List of resources",
    "Note over Client,Server: Resource Access\n    Client-\u003e\u003eServer: resources/read\n    Server--\u003e\u003eClient: Resource contents",
    "Note over Client,Server: Subscriptions\n    Client-\u003e\u003eServer: resources/subscribe\n    Server--\u003e\u003eClient: Subscription confirmed",
    "Note over Client,Server: Updates\n    Server--)Client: notifications/resources/updated\n    Client-\u003e\u003eServer: resources/read\n    Server--\u003e\u003eClient: Updated contents\n```",
    "## Data Types",
    "### Resource",
    "A resource definition includes:",
    "- `uri`: Unique identifier for the resource\n- `name`: Human-readable name\n- `description`: Optional description\n- `mimeType`: Optional MIME type",
    "### Resource Contents",
    "Resources can contain either text or binary data:",
    "#### Text Content",
    "```json\n{\n  \"uri\": \"file:///example.txt\",\n  \"mimeType\": \"text/plain\",\n  \"text\": \"Resource content\"\n}\n```",
    "#### Binary Content",
    "```json\n{\n  \"uri\": \"file:///example.png\",\n  \"mimeType\": \"image/png\",\n  \"blob\": \"base64-encoded-data\"\n}\n```",
    "## Common URI Schemes",
    "The protocol defines several standard URI schemes. This list not\nexhaustive\u0026mdash;implementations are always free to use additional, custom URI schemes.",
    "### https://",
    "Used to represent a resource available on the web.",
    "Servers **SHOULD** use this scheme only when the client is able to fetch and load the\nresource directly from the web on its own—that is, it doesn’t need to read the resource\nvia the MCP server.",
    "For other use cases, servers **SHOULD** prefer to use another URI scheme, or define a\ncustom one, even if the server will itself be downloading resource contents over the\ninternet.",
    "### file://",
    "Used to identify resources that behave like a filesystem. However, the resources do not\nneed to map to an actual physical filesystem.",
    "MCP servers **MAY** identify file:// resources with an\n[XDG MIME type](https://specifications.freedesktop.org/shared-mime-info-spec/0.14/ar01s02.html#id-1.3.14),\nlike `inode/directory`, to represent non-regular files (such as directories) that don’t\notherwise have a standard MIME type.",
    "### git://",
    "Git version control integration.",
    "## Error Handling",
    "Servers **SHOULD** return standard JSON-RPC errors for common failure cases:",
    "- Resource not found: `-32002`\n- Internal errors: `-32603`",
    "Example error:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"error\": {\n    \"code\": -32002,\n    \"message\": \"Resource not found\",\n    \"data\": {\n      \"uri\": \"file:///nonexistent.txt\"\n    }\n  }\n}\n```",
    "## Security Considerations",
    "1. Servers **MUST** validate all resource URIs\n2. Access controls **SHOULD** be implemented for sensitive resources\n3. Binary data **MUST** be properly encoded\n4. Resource permissions **SHOULD** be checked before operations",
    "---\ntitle: Tools\ntype: docs\nweight: 40\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "The Model Context Protocol (MCP) allows servers to expose tools that can be invoked by\nlanguage models. Tools enable models to interact with external systems, such as querying\ndatabases, calling APIs, or performing computations. Each tool is uniquely identified by\na name and includes metadata describing its schema.",
    "## User Interaction Model",
    "Tools in MCP are designed to be **model-controlled**, meaning that the language model can\ndiscover and invoke tools automatically based on its contextual understanding and the\nuser's prompts.",
    "However, implementations are free to expose tools through any interface pattern that\nsuits their needs\u0026mdash;the protocol itself does not mandate any specific user\ninteraction model.",
    "\u003cWarning\u003e",
    "For trust \u0026 safety and security, there **SHOULD** always\nbe a human in the loop with the ability to deny tool invocations.",
    "Applications **SHOULD**:",
    "- Provide UI that makes clear which tools are being exposed to the AI model\n- Insert clear visual indicators when tools are invoked\n- Present confirmation prompts to the user for operations, to ensure a human is in the\n  loop",
    "\u003c/Warning\u003e",
    "## Capabilities",
    "Servers that support tools **MUST** declare the `tools` capability:",
    "```json\n{\n  \"capabilities\": {\n    \"tools\": {\n      \"listChanged\": true\n    }\n  }\n}\n```",
    "`listChanged` indicates whether the server will emit notifications when the list of\navailable tools changes.",
    "## Protocol Messages",
    "### Listing Tools",
    "To discover available tools, clients send a `tools/list` request. This operation supports\n[pagination](/specification/2024-11-05/server/utilities/pagination).",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"tools\": [\n      {\n        \"name\": \"get_weather\",\n        \"description\": \"Get current weather information for a location\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"City name or zip code\"\n            }\n          },\n          \"required\": [\"location\"]\n        }\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```",
    "### Calling Tools",
    "To invoke a tool, clients send a `tools/call` request:",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"New York\"\n    }\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Current weather in New York:\\nTemperature: 72°F\\nConditions: Partly cloudy\"\n      }\n    ],\n    \"isError\": false\n  }\n}\n```",
    "### List Changed Notification",
    "When the list of available tools changes, servers that declared the `listChanged`\ncapability **SHOULD** send a notification:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/tools/list_changed\"\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant LLM\n    participant Client\n    participant Server",
    "Note over Client,Server: Discovery\n    Client-\u003e\u003eServer: tools/list\n    Server--\u003e\u003eClient: List of tools",
    "Note over Client,LLM: Tool Selection\n    LLM-\u003e\u003eClient: Select tool to use",
    "Note over Client,Server: Invocation\n    Client-\u003e\u003eServer: tools/call\n    Server--\u003e\u003eClient: Tool result\n    Client-\u003e\u003eLLM: Process result",
    "Note over Client,Server: Updates\n    Server--)Client: tools/list_changed\n    Client-\u003e\u003eServer: tools/list\n    Server--\u003e\u003eClient: Updated tools\n```",
    "## Data Types",
    "### Tool",
    "A tool definition includes:",
    "- `name`: Unique identifier for the tool\n- `description`: Human-readable description of functionality\n- `inputSchema`: JSON Schema defining expected parameters",
    "### Tool Result",
    "Tool results can contain multiple content items of different types:",
    "#### Text Content",
    "```json\n{\n  \"type\": \"text\",\n  \"text\": \"Tool result text\"\n}\n```",
    "#### Image Content",
    "```json\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-data\",\n  \"mimeType\": \"image/png\"\n}\n```",
    "#### Embedded Resources",
    "[Resources](/specification/2024-11-05/server/resources) **MAY** be\nembedded, to provide additional context or data, behind a URI that can be subscribed to\nor fetched again by the client later:",
    "```json\n{\n  \"type\": \"resource\",\n  \"resource\": {\n    \"uri\": \"resource://example\",\n    \"mimeType\": \"text/plain\",\n    \"text\": \"Resource content\"\n  }\n}\n```",
    "## Error Handling",
    "Tools use two error reporting mechanisms:",
    "1. **Protocol Errors**: Standard JSON-RPC errors for issues like:",
    "- Unknown tools\n   - Invalid arguments\n   - Server errors",
    "2. **Tool Execution Errors**: Reported in tool results with `isError: true`:\n   - API failures\n   - Invalid input data\n   - Business logic errors",
    "Example protocol error:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"Unknown tool: invalid_tool_name\"\n  }\n}\n```",
    "Example tool execution error:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Failed to fetch weather data: API rate limit exceeded\"\n      }\n    ],\n    \"isError\": true\n  }\n}\n```",
    "## Security Considerations",
    "1. Servers **MUST**:",
    "- Validate all tool inputs\n   - Implement proper access controls\n   - Rate limit tool invocations\n   - Sanitize tool outputs",
    "2. Clients **SHOULD**:\n   - Prompt for user confirmation on sensitive operations\n   - Show tool inputs to the user before calling the server, to avoid malicious or\n     accidental data exfiltration\n   - Validate tool results before passing to LLM\n   - Implement timeouts for tool calls\n   - Log tool usage for audit purposes",
    "---\ntitle: Completion\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for servers to offer\nargument autocompletion suggestions for prompts and resource URIs. This enables rich,\nIDE-like experiences where users receive contextual suggestions while entering argument\nvalues.",
    "## User Interaction Model",
    "Completion in MCP is designed to support interactive user experiences similar to IDE code\ncompletion.",
    "For example, applications may show completion suggestions in a dropdown or popup menu as\nusers type, with the ability to filter and select from available options.",
    "However, implementations are free to expose completion through any interface pattern that\nsuits their needs\u0026mdash;the protocol itself does not mandate any specific user\ninteraction model.",
    "## Protocol Messages",
    "### Requesting Completions",
    "To get completion suggestions, clients send a `completion/complete` request specifying\nwhat is being completed through a reference type:",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"completion/complete\",\n  \"params\": {\n    \"ref\": {\n      \"type\": \"ref/prompt\",\n      \"name\": \"code_review\"\n    },\n    \"argument\": {\n      \"name\": \"language\",\n      \"value\": \"py\"\n    }\n  }\n}\n```",
    "**Response:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"completion\": {\n      \"values\": [\"python\", \"pytorch\", \"pyside\"],\n      \"total\": 10,\n      \"hasMore\": true\n    }\n  }\n}\n```",
    "### Reference Types",
    "The protocol supports two types of completion references:",
    "| Type           | Description                 | Example                                             |\n| -------------- | --------------------------- | --------------------------------------------------- |\n| `ref/prompt`   | References a prompt by name | `{\"type\": \"ref/prompt\", \"name\": \"code_review\"}`     |\n| `ref/resource` | References a resource URI   | `{\"type\": \"ref/resource\", \"uri\": \"file:///{path}\"}` |",
    "### Completion Results",
    "Servers return an array of completion values ranked by relevance, with:",
    "- Maximum 100 items per response\n- Optional total number of available matches\n- Boolean indicating if additional results exist",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Note over Client: User types argument\n    Client-\u003e\u003eServer: completion/complete\n    Server--\u003e\u003eClient: Completion suggestions",
    "Note over Client: User continues typing\n    Client-\u003e\u003eServer: completion/complete\n    Server--\u003e\u003eClient: Refined suggestions\n```",
    "## Data Types",
    "### CompleteRequest",
    "- `ref`: A `PromptReference` or `ResourceReference`\n- `argument`: Object containing:\n  - `name`: Argument name\n  - `value`: Current value",
    "### CompleteResult",
    "- `completion`: Object containing:\n  - `values`: Array of suggestions (max 100)\n  - `total`: Optional total matches\n  - `hasMore`: Additional results flag",
    "## Implementation Considerations",
    "1. Servers **SHOULD**:",
    "- Return suggestions sorted by relevance\n   - Implement fuzzy matching where appropriate\n   - Rate limit completion requests\n   - Validate all inputs",
    "2. Clients **SHOULD**:\n   - Debounce rapid completion requests\n   - Cache completion results where appropriate\n   - Handle missing or partial results gracefully",
    "## Security",
    "Implementations **MUST**:",
    "- Validate all completion inputs\n- Implement appropriate rate limiting\n- Control access to sensitive suggestions\n- Prevent completion-based information disclosure",
    "---\ntitle: Logging\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "The Model Context Protocol (MCP) provides a standardized way for servers to send\nstructured log messages to clients. Clients can control logging verbosity by setting\nminimum log levels, with servers sending notifications containing severity levels,\noptional logger names, and arbitrary JSON-serializable data.",
    "## User Interaction Model",
    "Implementations are free to expose logging through any interface pattern that suits their\nneeds\u0026mdash;the protocol itself does not mandate any specific user interaction model.",
    "## Capabilities",
    "Servers that emit log message notifications **MUST** declare the `logging` capability:",
    "```json\n{\n  \"capabilities\": {\n    \"logging\": {}\n  }\n}\n```",
    "## Log Levels",
    "The protocol follows the standard syslog severity levels specified in\n[RFC 5424](https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1):",
    "| Level     | Description                      | Example Use Case           |\n| --------- | -------------------------------- | -------------------------- |\n| debug     | Detailed debugging information   | Function entry/exit points |\n| info      | General informational messages   | Operation progress updates |\n| notice    | Normal but significant events    | Configuration changes      |\n| warning   | Warning conditions               | Deprecated feature usage   |\n| error     | Error conditions                 | Operation failures         |\n| critical  | Critical conditions              | System component failures  |\n| alert     | Action must be taken immediately | Data corruption detected   |\n| emergency | System is unusable               | Complete system failure    |",
    "## Protocol Messages",
    "### Setting Log Level",
    "To configure the minimum log level, clients **MAY** send a `logging/setLevel` request:",
    "**Request:**",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"logging/setLevel\",\n  \"params\": {\n    \"level\": \"info\"\n  }\n}\n```",
    "### Log Message Notifications",
    "Servers send log messages using `notifications/message` notifications:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/message\",\n  \"params\": {\n    \"level\": \"error\",\n    \"logger\": \"database\",\n    \"data\": {\n      \"error\": \"Connection failed\",\n      \"details\": {\n        \"host\": \"localhost\",\n        \"port\": 5432\n      }\n    }\n  }\n}\n```",
    "## Message Flow",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Note over Client,Server: Configure Logging\n    Client-\u003e\u003eServer: logging/setLevel (info)\n    Server--\u003e\u003eClient: Empty Result",
    "Note over Client,Server: Server Activity\n    Server--)Client: notifications/message (info)\n    Server--)Client: notifications/message (warning)\n    Server--)Client: notifications/message (error)",
    "Note over Client,Server: Level Change\n    Client-\u003e\u003eServer: logging/setLevel (error)\n    Server--\u003e\u003eClient: Empty Result\n    Note over Server: Only sends error level\u003cbr/\u003eand above\n```",
    "## Error Handling",
    "Servers **SHOULD** return standard JSON-RPC errors for common failure cases:",
    "- Invalid log level: `-32602` (Invalid params)\n- Configuration errors: `-32603` (Internal error)",
    "## Implementation Considerations",
    "1. Servers **SHOULD**:",
    "- Rate limit log messages\n   - Include relevant context in data field\n   - Use consistent logger names\n   - Remove sensitive information",
    "2. Clients **MAY**:\n   - Present log messages in the UI\n   - Implement log filtering/search\n   - Display severity visually\n   - Persist log messages",
    "## Security",
    "1. Log messages **MUST NOT** contain:",
    "- Credentials or secrets\n   - Personal identifying information\n   - Internal system details that could aid attacks",
    "2. Implementations **SHOULD**:\n   - Rate limit messages\n   - Validate all data fields\n   - Control log access\n   - Monitor for sensitive content",
    "---\ntitle: Pagination\n---",
    "\u003cInfo\u003e**Protocol Revision**: 2024-11-05\u003c/Info\u003e",
    "The Model Context Protocol (MCP) supports paginating list operations that may return\nlarge result sets. Pagination allows servers to yield results in smaller chunks rather\nthan all at once.",
    "Pagination is especially important when connecting to external services over the\ninternet, but also useful for local integrations to avoid performance issues with large\ndata sets.",
    "## Pagination Model",
    "Pagination in MCP uses an opaque cursor-based approach, instead of numbered pages.",
    "- The **cursor** is an opaque string token, representing a position in the result set\n- **Page size** is determined by the server, and clients **MUST NOT** assume a fixed page\n  size",
    "## Response Format",
    "Pagination starts when the server sends a **response** that includes:",
    "- The current page of results\n- An optional `nextCursor` field if more results exist",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"result\": {\n    \"resources\": [...],\n    \"nextCursor\": \"eyJwYWdlIjogM30=\"\n  }\n}\n```",
    "## Request Format",
    "After receiving a cursor, the client can _continue_ paginating by issuing a request\nincluding that cursor:",
    "```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/list\",\n  \"params\": {\n    \"cursor\": \"eyJwYWdlIjogMn0=\"\n  }\n}\n```",
    "## Pagination Flow",
    "```mermaid\nsequenceDiagram\n    participant Client\n    participant Server",
    "Client-\u003e\u003eServer: List Request (no cursor)\n    loop Pagination Loop\n      Server--\u003e\u003eClient: Page of results + nextCursor\n      Client-\u003e\u003eServer: List Request (with cursor)\n    end\n```",
    "## Operations Supporting Pagination",
    "The following MCP operations support pagination:",
    "- `resources/list` - List available resources\n- `resources/templates/list` - List resource templates\n- `prompts/list` - List available prompts\n- `tools/list` - List available tools",
    "## Implementation Guidelines",
    "1. Servers **SHOULD**:",
    "- Provide stable cursors\n   - Handle invalid cursors gracefully",
    "2. Clients **SHOULD**:",
    "- Treat a missing `nextCursor` as the end of results\n   - Support both paginated and non-paginated flows",
    "3. Clients **MUST** treat cursors as opaque tokens:\n   - Don't make assumptions about cursor format\n   - Don't attempt to parse or modify cursors\n   - Don't persist cursors across sessions",
    "## Error Handling",
    "Invalid cursors **SHOULD** result in an error with code -32602 (Invalid params)."
  ],
  "count": 660,
  "version": "2024-11-05"
}
